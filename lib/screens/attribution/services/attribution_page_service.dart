import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../../controle_de_donnes/models/attribution_models_v2.dart';
import '../../controle_de_donnes/services/firestore_data_service.dart';
import '../../controle_de_donnes/models/collecte_models.dart';
import '../../controle_de_donnes/services/quality_control_service.dart';
import '../../controle_de_donnes/models/quality_control_models.dart';

/// üéØ SERVICE POUR LA PAGE D'ATTRIBUTION UNIFI√âE
///
/// Ce service g√®re toute la logique m√©tier pour la nouvelle page d'attribution
/// unifiant extraction, filtrage et traitement cire
class AttributionPageService {
  static final AttributionPageService _instance =
      AttributionPageService._internal();
  factory AttributionPageService() => _instance;
  AttributionPageService._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final QualityControlService _qualityService = QualityControlService();

  /// üìä R√âCUP√âRATION DES PRODUITS DISPONIBLES POUR ATTRIBUTION
  ///
  /// Charge tous les produits contr√¥l√©s et conformes qui peuvent √™tre attribu√©s
  /// UTILISE LE M√äME SYST√àME QUE LA PAGE PRINCIPALE POUR √äTRE COH√âRENT
  Future<List<ProductControle>> getProduitsDisponiblesAttribution() async {
    try {
      debugPrint('üîÑ Attribution: D√©but chargement produits...');

      // ‚úÖ UTILISER LE SERVICE DE LA PAGE PRINCIPALE
      // Au lieu de chercher dans 'controles_qualite' (qui est vide)
      // On utilise FirestoreDataService qui va dans les vraies collections
      final collectesData =
          await FirestoreDataService.getCollectesFromFirestore();

      final produits = <ProductControle>[];
      int totalCollectesTraitees = 0;

      // Parcourir toutes les collectes pour extraire les produits contr√¥l√©s
      for (final section in collectesData.entries) {
        final collectes = section.value;
        totalCollectesTraitees += collectes.length;
        debugPrint(
            'üìã Attribution: Section ${section.key.name}: ${collectes.length} collectes');

        for (final collecte in collectes) {
          // Analyser chaque collecte
          final containersCount = collecte.containersCount ?? 0;
          debugPrint('   üì¶ Attribution: Collecte ${collecte.id}:');
          debugPrint('      - Type: ${collecte.runtimeType}');
          debugPrint('      - Site: ${collecte.site}');
          debugPrint('      - Date: ${collecte.date}');
          debugPrint('      - Technicien: ${collecte.technicien}');
          debugPrint('      - ContainersCount: $containersCount');
          debugPrint('      - TotalWeight: ${collecte.totalWeight}');

          // Convertir chaque collecte en produits disponibles pour attribution
          final produitsFromCollecte =
              await _convertCollecteToProductsControle(collecte);
          debugPrint(
              '      ‚Üí Produits g√©n√©r√©s: ${produitsFromCollecte.length}');

          if (produitsFromCollecte.isNotEmpty) {
            debugPrint(
                '      ‚Üí Premier produit: ${produitsFromCollecte.first.id}');
            debugPrint(
                '         - Nature: ${produitsFromCollecte.first.nature.name}');
            debugPrint(
                '         - Conforme: ${produitsFromCollecte.first.estConforme}');
            debugPrint(
                '         - Attribu√©: ${produitsFromCollecte.first.estAttribue}');
          }

          produits.addAll(produitsFromCollecte);
        }
      }

      debugPrint('üìà Attribution: R√©sum√© collectes:');
      debugPrint('   - Total collectes trait√©es: $totalCollectesTraitees');
      debugPrint('   - Total produits g√©n√©r√©s: ${produits.length}');

      // Analyser la r√©partition par nature
      final brutsCount =
          produits.where((p) => p.nature == ProductNature.brut).length;
      final liquidesCount =
          produits.where((p) => p.nature == ProductNature.liquide).length;
      final cireCount =
          produits.where((p) => p.nature == ProductNature.cire).length;

      debugPrint('üìä Attribution: R√©partition par nature:');
      debugPrint('   - Bruts: $brutsCount');
      debugPrint('   - Liquides: $liquidesCount');
      debugPrint('   - Cire: $cireCount');

      // Filtrer les produits qui peuvent √™tre attribu√©s
      final produitsDisponibles = produits.where(_peutEtreAttribue).toList();

      debugPrint('üìä Attribution: Filtrage final:');
      debugPrint('   - Avant filtrage: ${produits.length}');
      debugPrint('   - Apr√®s filtrage: ${produitsDisponibles.length}');

      // Analyser pourquoi certains produits sont filtr√©s
      final produitsRejetes =
          produits.where((p) => !_peutEtreAttribue(p)).toList();
      debugPrint('   - Produits rejet√©s: ${produitsRejetes.length}');

      if (produitsRejetes.isNotEmpty) {
        final premierRejete = produitsRejetes.first;
        debugPrint('   - Exemple rejet√©: ${premierRejete.id}');
        debugPrint('     * estControle: ${premierRejete.estControle}');
        debugPrint('     * estConforme: ${premierRejete.estConforme}');
        debugPrint('     * estAttribue: ${premierRejete.estAttribue}');
        debugPrint('     * statutControle: ${premierRejete.statutControle}');
      }

      debugPrint(
          '‚úÖ Attribution: ${produitsDisponibles.length} produits disponibles pour attribution');
      return produitsDisponibles;
    } catch (e) {
      debugPrint('‚ùå Attribution: Erreur r√©cup√©ration produits: $e');
      debugPrint('‚ùå Attribution: Stack trace: ${StackTrace.current}');
      return [];
    }
  }

  /// üîç FILTRAGE AVANC√â DES PRODUITS
  ///
  /// Applique des filtres sp√©cifiques selon les crit√®res
  List<ProductControle> filtrerProduits(
    List<ProductControle> produits, {
    ProductNature? nature,
    String? site,
    String? qualite,
    bool? urgentOnly,
    DateTime? dateDebut,
    DateTime? dateFin,
    String? searchQuery,
  }) {
    return produits.where((produit) {
      // Filtre par nature
      if (nature != null && produit.nature != nature) return false;

      // Filtre par site
      if (site != null && produit.siteOrigine != site) return false;

      // Filtre par qualit√©
      if (qualite != null && produit.qualite != qualite) return false;

      // Filtre urgence
      if (urgentOnly == true && !produit.isUrgent) return false;

      // Filtre par date
      if (dateDebut != null && produit.dateReception.isBefore(dateDebut))
        return false;
      if (dateFin != null && produit.dateReception.isAfter(dateFin))
        return false;

      // Filtre par recherche textuelle
      if (searchQuery != null && searchQuery.isNotEmpty) {
        final query = searchQuery.toLowerCase();
        if (!produit.producteur.toLowerCase().contains(query) &&
            !produit.codeContenant.toLowerCase().contains(query) &&
            !produit.village.toLowerCase().contains(query)) {
          return false;
        }
      }

      return true;
    }).toList();
  }

  /// üìà CALCUL DES STATISTIQUES
  ///
  /// G√©n√®re les statistiques pour le tableau de bord
  Map<String, int> calculerStatistiques(List<ProductControle> produits) {
    final stats = <String, int>{
      'total': produits.length,
      'bruts': produits.where((p) => p.nature == ProductNature.brut).length,
      'liquides':
          produits.where((p) => p.nature == ProductNature.liquide).length,
      'cire': produits.where((p) => p.nature == ProductNature.cire).length,
      'urgents': produits.where((p) => p.isUrgent).length,
      'conformes': produits.where((p) => p.estConforme).length,
      'nonConformes': produits.where((p) => !p.estConforme).length,
    };

    // Statistiques par site
    final parSite = <String, int>{};
    for (final produit in produits) {
      parSite[produit.siteOrigine] = (parSite[produit.siteOrigine] ?? 0) + 1;
    }
    stats['nombreSites'] = parSite.length;

    return stats;
  }

  /// ‚úÖ V√âRIFICATION D'ATTRIBUTION
  ///
  /// V√©rifie si un produit peut √™tre attribu√©
  bool _peutEtreAttribue(ProductControle produit) {
    // Le produit doit √™tre contr√¥l√© ET conforme ET non attribu√©
    return produit.estControle &&
        produit.estConforme &&
        !produit.estAttribue &&
        (produit.statutControle == 'valide' ||
            produit.statutControle == 'termine');
  }

  /// üéØ ATTRIBUTION SP√âCIFIQUE PAR TYPE
  ///
  /// R√©cup√®re les produits disponibles pour un type d'attribution sp√©cifique
  Future<List<ProductControle>> getProduitsParType(AttributionType type) async {
    final tousProduits = await getProduitsDisponiblesAttribution();

    return tousProduits.where((produit) {
      switch (type) {
        case AttributionType.extraction:
          return produit.nature == ProductNature.brut;
        case AttributionType.filtration:
          return produit.nature == ProductNature.liquide;
        case AttributionType.traitementCire:
          return produit.nature == ProductNature.cire;
      }
    }).toList();
  }

  /// üìä STATISTIQUES D√âTAILL√âES PAR TYPE
  ///
  /// G√©n√®re des statistiques sp√©cifiques pour chaque type d'attribution
  Future<Map<String, dynamic>> getStatistiquesDetaillees() async {
    final produits = await getProduitsDisponiblesAttribution();

    return {
      'global': calculerStatistiques(produits),
      'extraction': {
        'disponibles':
            produits.where((p) => p.nature == ProductNature.brut).length,
        'urgents': produits
            .where((p) => p.nature == ProductNature.brut && p.isUrgent)
            .length,
      },
      'filtrage': {
        'disponibles':
            produits.where((p) => p.nature == ProductNature.liquide).length,
        'urgents': produits
            .where((p) => p.nature == ProductNature.liquide && p.isUrgent)
            .length,
      },
      'traitementCire': {
        'disponibles':
            produits.where((p) => p.nature == ProductNature.cire).length,
        'urgents': produits
            .where((p) => p.nature == ProductNature.cire && p.isUrgent)
            .length,
      },
    };
  }

  /// üîç RECHERCHE AVANC√âE
  ///
  /// Effectue une recherche textuelle avanc√©e
  Future<List<ProductControle>> rechercherProduits(String query) async {
    if (query.trim().isEmpty) return [];

    final produits = await getProduitsDisponiblesAttribution();
    final queryLower = query.toLowerCase().trim();

    return produits.where((produit) {
      return produit.codeContenant.toLowerCase().contains(queryLower) ||
          produit.producteur.toLowerCase().contains(queryLower) ||
          produit.village.toLowerCase().contains(queryLower) ||
          produit.commune.toLowerCase().contains(queryLower) ||
          produit.qualite.toLowerCase().contains(queryLower) ||
          produit.predominanceFlorale.toLowerCase().contains(queryLower);
    }).toList();
  }

  /// üè∑Ô∏è MISE √Ä JOUR STATUT ATTRIBUTION
  ///
  /// Met √† jour le statut d'attribution d'un produit
  Future<void> marquerCommeAttribue(
      String produitId, AttributionType type, String attributionId) async {
    try {
      await _firestore.collection('controles_qualite').doc(produitId).update({
        'estAttribue': true,
        'attributionId': attributionId,
        'typeAttribution': type.value,
        'dateAttribution': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });
    } catch (e) {
      debugPrint('Erreur mise √† jour attribution: $e');
      rethrow;
    }
  }

  /// üîÑ CONVERSION DES COLLECTES EN PRODUITS CONTR√îL√âS
  ///
  /// Convertit une collecte (BaseCollecte) en liste de ProductControle
  /// üîß UTILISE UNIQUEMENT LES VRAIES DONN√âES DE CONTR√îLE QUALIT√â DEPUIS FIRESTORE !
  Future<List<ProductControle>> _convertCollecteToProductsControle(
      BaseCollecte collecte) async {
    final produits = <ProductControle>[];

    try {
      debugPrint(
          'üîÑ [NOUVEAU] R√©cup√©ration contr√¥les qualit√© pour collecte ${collecte.id}:');
      debugPrint('   - Type collecte: ${collecte.runtimeType}');
      debugPrint('   - Site: ${collecte.site}');
      debugPrint('   - Date: ${collecte.date}');

      // üéØ R√âCUP√âRER LES CONTR√îLES PAR M√âTHODE ALTERNATIVE (containerCode)
      // M√©thode 1: Essayer avec collecteId (pour les nouveaux contr√¥les)
      List<QualityControlData> controles =
          await _qualityService.getQualityControlsForCollecte(collecte.id);

      debugPrint('‚úÖ Contr√¥les via collecteId: ${controles.length}');

      // M√©thode 2: Si aucun contr√¥le trouv√©, chercher par containerCode pattern
      if (controles.isEmpty) {
        debugPrint('üîç Recherche alternative par containerCode...');
        controles = await _getQualityControlsByContainerPattern(collecte);
        debugPrint('‚úÖ Contr√¥les via containerCode: ${controles.length}');
      }

      if (controles.isEmpty) {
        debugPrint(
            '‚ö†Ô∏è AUCUN contr√¥le qualit√© trouv√© pour collecte ${collecte.id}');
        debugPrint('   üìã Type: ${collecte.runtimeType}');
        debugPrint('   üìÖ Date: ${collecte.date}');
        debugPrint('   üè≠ Site: ${collecte.site}');
        return produits; // Retourner une liste vide
      }

      // üîß CR√âER LES PRODUITS √Ä PARTIR DES VRAIES DONN√âES DE CONTR√îLE
      for (final controle in controles) {
        // Ne prendre que les produits conformes et non attribu√©s
        if (controle.conformityStatus == ConformityStatus.conforme &&
            !controle.estAttribue) {
          debugPrint('   ‚Üí Produit conforme trouv√©: ${controle.containerCode}');
          debugPrint(
              '      - Poids total contr√¥le: ${controle.totalWeight} kg');
          debugPrint('      - Poids miel contr√¥le: ${controle.honeyWeight} kg');
          debugPrint('      - Qualit√©: ${controle.quality}');

          // D√©terminer la nature selon le type de miel du contr√¥le
          ProductNature nature;
          switch (controle.honeyNature) {
            case HoneyNature.brut:
              nature = ProductNature.brut;
              break;
            case HoneyNature.prefilitre:
              nature = ProductNature.liquide;
              break;
          }

          final produit = ProductControle(
            id: '${collecte.id}_${controle.containerCode}',
            codeContenant: controle.containerCode,
            dateReception: controle.receptionDate,
            producteur: controle.producer,
            village: controle.apiaryVillage,
            commune: '', // Pas disponible dans les donn√©es de contr√¥le
            quartier: '', // Pas disponible dans les donn√©es de contr√¥le
            nature: nature,
            typeContenant: controle.containerType,
            numeroContenant: controle.containerNumber,
            // üéØ UTILISER LES VRAIS POIDS DU CONTR√îLE QUALIT√â !
            poidsTotal: controle.totalWeight,
            poidsMiel: controle.honeyWeight,
            qualite: controle.quality,
            teneurEau: controle.waterContent,
            predominanceFlorale: controle.floralPredominance,
            estConforme: controle.conformityStatus == ConformityStatus.conforme,
            causeNonConformite: controle.nonConformityCause,
            observations: controle.observations,
            dateControle: controle.createdAt,
            controleur: controle.controllerName,
            estAttribue: controle.estAttribue,
            attributionId: controle.attributionId,
            typeAttribution: controle.typeAttribution,
            dateAttribution: controle.dateAttribution,
            controlId: controle.documentId ??
                '${controle.containerCode}_${controle.receptionDate.millisecondsSinceEpoch}', // üÜï Utiliser le documentId r√©el ou fallback
            siteOrigine: collecte.site,
            collecteId: collecte.id,
            typeCollecte: collecte.runtimeType.toString(),
            dateCollecte: collecte.date,
            estControle: true,
            statutControle: 'valide',
            metadata: {
              'source': 'quality_control',
              'convertedAt': DateTime.now().toIso8601String(),
            },
          );

          produits.add(produit);

          debugPrint('   ‚úÖ Produit cr√©√© depuis contr√¥le: ${produit.id}');
          debugPrint(
              '      - Poids total: ${produit.poidsTotal.toStringAsFixed(2)} kg (CONTR√îLE)');
          debugPrint(
              '      - Poids miel: ${produit.poidsMiel.toStringAsFixed(2)} kg (CONTR√îLE)');
          debugPrint('      - Nature: ${produit.nature.name}');
          debugPrint('      - Conforme: ${produit.estConforme}');
        } else {
          debugPrint('   ‚ùå Produit non disponible: ${controle.containerCode}');
          debugPrint(
              '      - Conforme: ${controle.conformityStatus == ConformityStatus.conforme}');
          debugPrint('      - Attribu√©: ${controle.estAttribue}');
        }
      }

      debugPrint('üìä === R√âSUM√â COLLECTE ${collecte.id} ===');
      debugPrint('   üîç Contr√¥les trouv√©s: ${controles.length}');
      debugPrint('   ‚úÖ Produits disponibles: ${produits.length}');
      debugPrint(
          '   ‚öñÔ∏è Poids total (depuis contr√¥les): ${produits.fold(0.0, (sum, p) => sum + p.poidsTotal).toStringAsFixed(2)} kg');
      debugPrint(
          '   üçØ Poids miel total (depuis contr√¥les): ${produits.fold(0.0, (sum, p) => sum + p.poidsMiel).toStringAsFixed(2)} kg');
      debugPrint('   ===============================================');

      return produits;
    } catch (e, stackTrace) {
      debugPrint('‚ùå Erreur conversion collecte ${collecte.id}: $e');
      debugPrint('‚ùå Stack trace: $stackTrace');
    }

    return produits;
  }

  /// üÜï RECHERCHE ALTERNATIVE PAR CONTAINERCODE EXACT
  ///
  /// Cherche les contr√¥les qualit√© qui correspondent exactement aux contenants de cette collecte
  /// Plus pr√©cis que le pattern matching, utilise les vrais containerCode
  Future<List<QualityControlData>> _getQualityControlsByContainerPattern(
      BaseCollecte collecte) async {
    try {
      // R√©cup√©rer TOUS les contr√¥les qualit√© existants
      final tousLesControles =
          await _qualityService.getAllQualityControlsFromFirestore();
      debugPrint('üîç Total contr√¥les disponibles: ${tousLesControles.length}');

      if (tousLesControles.isEmpty) {
        return [];
      }

      // üéØ EXTRAIRE LES VRAIS CONTAINERCODE DE CETTE COLLECTE
      final containerCodesCollecte =
          _extractContainerCodesFromCollecte(collecte);
      debugPrint('üéØ ContainerCodes r√©els de collecte ${collecte.id}:');
      for (final code in containerCodesCollecte) {
        debugPrint('   üì¶ $code');
      }

      if (containerCodesCollecte.isEmpty) {
        debugPrint('‚ö†Ô∏è Aucun containerCode trouv√© dans la collecte');
        return [];
      }

      // Filtrer les contr√¥les qui correspondent EXACTEMENT aux containerCode de cette collecte
      final controlesCorrespondants = <QualityControlData>[];

      for (final controle in tousLesControles) {
        if (containerCodesCollecte.contains(controle.containerCode)) {
          controlesCorrespondants.add(controle);
          debugPrint('   ‚úÖ MATCH EXACT: ${controle.containerCode}');
          debugPrint('      - Poids total: ${controle.totalWeight} kg');
          debugPrint('      - Poids miel: ${controle.honeyWeight} kg');
          debugPrint('      - Producteur: ${controle.producer}');
          debugPrint('      - Statut: ${controle.conformityStatus.name}');
        }
      }

      debugPrint(
          'üìä Contr√¥les trouv√©s par matching exact: ${controlesCorrespondants.length}');
      return controlesCorrespondants;
    } catch (e) {
      debugPrint('‚ùå Erreur recherche par containerCode exact: $e');
      return [];
    }
  }

  /// Extrait les containerCode r√©els d'une collecte
  List<String> _extractContainerCodesFromCollecte(BaseCollecte collecte) {
    final containerCodes = <String>[];

    try {
      debugPrint(
          'üîç Extraction containerCodes de ${collecte.runtimeType} ${collecte.id}');

      if (collecte is Recolte) {
        // Pour les r√©coltes, parcourir les contenants
        for (final contenant in collecte.contenants) {
          containerCodes.add(contenant.id);
          debugPrint('   üì¶ Recolte ‚Üí ${contenant.id}');
        }
      } else if (collecte is Scoop) {
        // Pour les SCOOP, parcourir les contenants
        for (final contenant in collecte.contenants) {
          containerCodes.add(contenant.id);
          debugPrint('   üì¶ Scoop ‚Üí ${contenant.id}');
        }
      } else if (collecte is Individuel) {
        // Pour les individuel, parcourir les contenants
        for (final contenant in collecte.contenants) {
          containerCodes.add(contenant.id);
          debugPrint('   üì¶ Individuel ‚Üí ${contenant.id}');
        }
      } else if (collecte is Miellerie) {
        // Pour les mielleries, parcourir les contenants
        for (final contenant in collecte.contenants) {
          containerCodes.add(contenant.id);
          debugPrint('   üì¶ Miellerie ‚Üí ${contenant.id}');
        }
      } else {
        debugPrint('‚ùå Type de collecte non reconnu: ${collecte.runtimeType}');
      }

      debugPrint('‚úÖ ${containerCodes.length} containerCodes extraits');
    } catch (e) {
      debugPrint('‚ùå Erreur extraction containerCodes: $e');
    }

    return containerCodes;
  }
}
