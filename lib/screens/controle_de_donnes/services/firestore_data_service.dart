/// Service pour r√©cup√©rer les vraies donn√©es des collectes depuis Firestore
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:get/get.dart';
import '../../../authentication/user_session.dart';
import '../models/collecte_models.dart';

class FirestoreDataService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// Structure des collections Firestore bas√©e sur l'analyse du code
  ///
  /// R√âCOLTES: Sites/{site}/nos_collectes_recoltes/
  /// SCOOP: Sites/{site}/nos_achats_scoop_contenants/ OU {site}/collectes_scoop/collectes_scoop/ (legacy)
  /// INDIVIDUEL: Sites/{site}/nos_achats_individuels/
  /// MIELLERIE: Sites/{site}/nos_achats_miellerie/ (assum√©)

  /// R√©cup√®re toutes les collectes r√©elles depuis Firestore
  static Future<Map<Section, List<BaseCollecte>>>
      getCollectesFromFirestore() async {
    try {
      final userSession = Get.find<UserSession>();
      final userSite = userSession.site ?? '';

      if (userSite.isEmpty) {
        throw Exception('Aucun site utilisateur trouv√©');
      }

      print(
          'üîç Chargement des collectes depuis Firestore pour le site: $userSite');

      // Chargement en parall√®le de toutes les sections
      if (kDebugMode) {
        print('üìä ===== D√âBUT CHARGEMENT TOUTES COLLECTES =====');
        print('üìä Site utilisateur: $userSite');
        print('üìä Lancement du chargement en parall√®le...');
      }

      final results = await Future.wait([
        _getRecoltes(userSite),
        _getScoop(userSite),
        _getIndividuel(userSite),
        _getMiellerie(userSite),
      ]);

      final data = {
        Section.recoltes: results[0],
        Section.scoop: results[1],
        Section.individuel: results[2],
        Section.miellerie: results[3],
      };

      if (kDebugMode) {
        print('üìä ===== CHARGEMENT TERMIN√â =====');
        print('üìä ‚úÖ R√âSUM√â GLOBAL:');
        print('üìä    üè≠ R√©coltes: ${data[Section.recoltes]!.length} collectes');
        print('üìä    ü•Ñ SCOOP: ${data[Section.scoop]!.length} collectes');
        print(
            'üìä    üë§ Individuel: ${data[Section.individuel]!.length} collectes');
        print(
            'üìä    üçØ Miellerie: ${data[Section.miellerie]!.length} collectes');
        print(
            'üìä    üìä TOTAL: ${data.values.expand((list) => list).length} collectes');
        print('üìä ================================');
      }

      print('‚úÖ Collectes charg√©es:');
      print('   - R√©coltes: ${data[Section.recoltes]!.length}');
      print('   - SCOOP: ${data[Section.scoop]!.length}');
      print('   - Individuel: ${data[Section.individuel]!.length}');
      print('   - Miellerie: ${data[Section.miellerie]!.length}');

      return data;
    } catch (e) {
      print('‚ùå Erreur lors du chargement des collectes: $e');
      rethrow;
    }
  }

  /// R√©cup√®re les collectes de r√©coltes
  static Future<List<Recolte>> _getRecoltes(String site) async {
    final recoltes = <Recolte>[];

    try {
      // Nouveau chemin: Sites/{site}/nos_collectes_recoltes
      final snapshot = await _firestore
          .collection('Sites')
          .doc(site)
          .collection('nos_collectes_recoltes')
          .orderBy('createdAt', descending: true)
          .get();

      for (final doc in snapshot.docs) {
        try {
          final data = doc.data();
          final recolte = _mapToRecolte(doc.id, site, data);
          recoltes.add(recolte);
        } catch (e) {
          print('‚ö†Ô∏è Erreur conversion r√©colte ${doc.id}: $e');
        }
      }

      print(
          '‚úÖ ${recoltes.length} r√©coltes charg√©es depuis Sites/$site/nos_collectes_recoltes');
    } catch (e) {
      print('‚ùå Erreur chargement r√©coltes: $e');

      // Fallback vers l'ancien chemin si n√©cessaire
      try {
        final legacySnapshot = await _firestore
            .collection(site)
            .doc('collectes_recolte')
            .collection('collectes_recolte')
            .orderBy('createdAt', descending: true)
            .get();

        for (final doc in legacySnapshot.docs) {
          try {
            final data = doc.data();
            final recolte = _mapToRecolte(doc.id, site, data);
            recoltes.add(recolte);
          } catch (e) {
            print('‚ö†Ô∏è Erreur conversion r√©colte legacy ${doc.id}: $e');
          }
        }

        print(
            '‚úÖ ${recoltes.length} r√©coltes charg√©es depuis $site/collectes_recolte (legacy)');
      } catch (e2) {
        print('‚ùå Erreur fallback r√©coltes: $e2');
      }
    }

    return recoltes;
  }

  /// R√©cup√®re les collectes SCOOP
  static Future<List<Scoop>> _getScoop(String site) async {
    final scoops = <Scoop>[];

    try {
      // Nouveau chemin: Sites/{site}/nos_achats_scoop_contenants
      final snapshot = await _firestore
          .collection('Sites')
          .doc(site)
          .collection('nos_achats_scoop_contenants')
          .orderBy('created_at', descending: true)
          .get();

      for (final doc in snapshot.docs) {
        try {
          final data = doc.data();
          final scoop = await _mapToScoopAsync(doc.id, site, data);
          scoops.add(scoop);
        } catch (e) {
          print('‚ö†Ô∏è Erreur conversion SCOOP ${doc.id}: $e');
        }
      }

      print(
          '‚úÖ ${scoops.length} SCOOP charg√©s depuis Sites/$site/nos_achats_scoop_contenants');
    } catch (e) {
      print('‚ùå Erreur chargement SCOOP: $e');

      // Fallback vers l'ancien chemin
      try {
        final legacySnapshot = await _firestore
            .collection(site)
            .doc('collectes_scoop')
            .collection('collectes_scoop')
            .orderBy('createdAt', descending: true)
            .get();

        for (final doc in legacySnapshot.docs) {
          try {
            final data = doc.data();
            final scoop = _mapToScoopLegacy(doc.id, site, data);
            scoops.add(scoop);
          } catch (e) {
            print('‚ö†Ô∏è Erreur conversion SCOOP legacy ${doc.id}: $e');
          }
        }

        print(
            '‚úÖ ${scoops.length} SCOOP charg√©s depuis $site/collectes_scoop (legacy)');
      } catch (e2) {
        print('‚ùå Erreur fallback SCOOP: $e2');
      }
    }

    return scoops;
  }

  /// R√©cup√®re les collectes individuelles
  static Future<List<Individuel>> _getIndividuel(String site) async {
    final individuels = <Individuel>[];

    try {
      // Chemin: Sites/{site}/nos_achats_individuels
      final snapshot = await _firestore
          .collection('Sites')
          .doc(site)
          .collection('nos_achats_individuels')
          .orderBy('created_at', descending: true)
          .get();

      for (final doc in snapshot.docs) {
        try {
          // Ignorer les documents de statistiques
          if (doc.id.startsWith('_') || doc.id.contains('statistiques')) {
            continue;
          }

          final data = doc.data();
          final individuel = await _mapToIndividuelAsync(doc.id, site, data);
          individuels.add(individuel);
        } catch (e) {
          print('‚ö†Ô∏è Erreur conversion Individuel ${doc.id}: $e');
        }
      }

      print(
          '‚úÖ ${individuels.length} collectes individuelles charg√©es depuis Sites/$site/nos_achats_individuels');
    } catch (e) {
      print('‚ùå Erreur chargement individuels: $e');
    }

    return individuels;
  }

  /// Convertit les donn√©es Firestore en mod√®le Recolte
  static Recolte _mapToRecolte(
      String docId, String site, Map<String, dynamic> data) {
    final contenants = <RecolteContenant>[];

    // Conversion des contenants
    final contenantsData = data['contenants'] as List<dynamic>? ?? [];
    for (int i = 0; i < contenantsData.length; i++) {
      final contenantData = contenantsData[i] as Map<String, dynamic>;

      if (kDebugMode) {
        print('üè≠ === CONTENANT ${i + 1} ===');
        print('üè≠ Donn√©es brutes: ${contenantData.keys.toList()}');
      }

      // ‚úÖ R√âCUP√âRATION DE L'ID DEPUIS FIRESTORE (ou fallback si absent)
      final contenantId = contenantData['id']?.toString() ??
          'C${(i + 1).toString().padLeft(3, '0')}_recolte';

      if (kDebugMode) {
        print('üè≠ Contenant r√©colte ${i + 1}: ID g√©n√©r√© = $contenantId');
      }

      // R√©cup√©rer les informations de contr√¥le si elles existent
      ContainerControlInfo controlInfo = const ContainerControlInfo();
      if (contenantData['controlInfo'] != null) {
        if (kDebugMode) {
          print('üè≠ ControlInfo trouv√©: ${contenantData['controlInfo']}');
        }
        try {
          final controlInfoData =
              contenantData['controlInfo'] as Map<String, dynamic>;
          controlInfo = ContainerControlInfo.fromMap(controlInfoData);
          if (kDebugMode) {
            print(
                'üè≠ ControlInfo pars√©: isControlled=${controlInfo.isControlled}');
          }
        } catch (e) {
          if (kDebugMode) {
            print('‚ö†Ô∏è Erreur lors de la lecture du controlInfo: $e');
          }
        }
      } else {
        if (kDebugMode) {
          print('üè≠ Aucun controlInfo');
        }
      }

      contenants.add(RecolteContenant(
        id: contenantId, // ‚úÖ CORRIG√â: Utiliser l'ID r√©el
        hiveType: contenantData['hiveType']?.toString() ?? 'Non sp√©cifi√©',
        containerType:
            contenantData['containerType']?.toString() ?? 'Non sp√©cifi√©',
        weight: (contenantData['weight'] ?? 0).toDouble(),
        unitPrice: (contenantData['unitPrice'] ?? 0).toDouble(),
        total: (contenantData['total'] ?? 0).toDouble(),
        controlInfo: controlInfo, // ‚úÖ AJOUT√â: Inclure les infos de contr√¥le
      ));
    }

    // Conversion des pr√©dominances florales
    final predominancesFlorales = <String>[];
    final floralesData = data['predominances_florales'];
    if (floralesData is List) {
      predominancesFlorales.addAll(floralesData.map((e) => e.toString()));
    }

    return Recolte(
      id: docId,
      path: 'Sites/$site/nos_collectes_recoltes/$docId',
      site: site,
      date: _extractDate(data),
      technicien: data['technicien_nom']?.toString(),
      statut: data['status']?.toString() ?? data['statut']?.toString(),
      totalWeight: (data['totalWeight'] ?? 0).toDouble(),
      totalAmount: (data['totalAmount'] ?? 0).toDouble(),
      region: data['region']?.toString(),
      province: data['province']?.toString(),
      commune: data['commune']?.toString(),
      village: data['village']?.toString(),
      predominancesFlorales: predominancesFlorales,
      contenants: contenants,
    );
  }

  /// Convertit les donn√©es Firestore en mod√®le Scoop (avec infos g√©ographiques)
  static Future<Scoop> _mapToScoopAsync(
      String docId, String site, Map<String, dynamic> data) async {
    final contenants = <ScoopContenant>[];

    if (kDebugMode) {
      print('ü•Ñ ===== D√âBUT MAPPING SCOOP $docId =====');
      print('ü•Ñ Site: $site');
      print('ü•Ñ Champs disponibles: ${data.keys.toList()}');
      print('ü•Ñ Donn√©es brutes compl√®tes: $data');
      print('ü•Ñ =====================================');
    }

    // Conversion des contenants/produits - Essayer diff√©rents champs
    List<dynamic> produitsData = [];

    // V√©rifier les diff√©rents noms de champs possibles
    if (data['produits'] != null) {
      produitsData = data['produits'] as List<dynamic>;
      if (kDebugMode)
        print(
            'ü•Ñ Utilisation du champ "produits": ${produitsData.length} √©l√©ments');
    } else if (data['contenants'] != null) {
      produitsData = data['contenants'] as List<dynamic>;
      if (kDebugMode)
        print(
            'ü•Ñ Utilisation du champ "contenants": ${produitsData.length} √©l√©ments');
    } else if (data['details'] != null) {
      produitsData = data['details'] as List<dynamic>;
      if (kDebugMode)
        print(
            'ü•Ñ Utilisation du champ "details": ${produitsData.length} √©l√©ments');
    }

    for (int i = 0; i < produitsData.length; i++) {
      final produitData = produitsData[i] as Map<String, dynamic>;

      if (kDebugMode) {
        print('ü•Ñ === PRODUIT ${i + 1} ===');
        print('ü•Ñ Champs produit: ${produitData.keys.toList()}');
      }

      // ‚úÖ R√âCUP√âRATION DE L'ID DEPUIS FIRESTORE (ou fallback si absent)
      final contenantId = produitData['id']?.toString() ??
          'C${(i + 1).toString().padLeft(3, '0')}_scoop';

      if (kDebugMode) {
        print('ü•Ñ Contenant SCOOP ${i + 1}: ID g√©n√©r√© = $contenantId');
      }

      // R√©cup√©rer les informations de contr√¥le si elles existent
      ContainerControlInfo controlInfo = const ContainerControlInfo();
      if (produitData['controlInfo'] != null) {
        if (kDebugMode) {
          print('ü•Ñ ControlInfo trouv√©: ${produitData['controlInfo']}');
        }
        try {
          final controlInfoData =
              produitData['controlInfo'] as Map<String, dynamic>;
          controlInfo = ContainerControlInfo.fromMap(controlInfoData);
          if (kDebugMode) {
            print(
                'ü•Ñ ControlInfo pars√©: isControlled=${controlInfo.isControlled}');
          }
        } catch (e) {
          if (kDebugMode) {
            print('‚ö†Ô∏è Erreur lors de la lecture du controlInfo SCOOP: $e');
          }
        }
      } else {
        if (kDebugMode) {
          print('ü•Ñ Aucun controlInfo');
        }
      }

      contenants.add(ScoopContenant(
        id: contenantId, // ‚úÖ CORRIG√â: Utiliser l'ID r√©el
        typeContenant: produitData['typeContenant']?.toString() ??
            produitData['type_contenant']?.toString() ??
            'Non sp√©cifi√©',
        typeMiel: produitData['typeMiel']?.toString() ??
            produitData['type_miel']?.toString() ??
            'Non sp√©cifi√©',
        quantite:
            (produitData['poids'] ?? produitData['quantite'] ?? 0).toDouble(),
        prixUnitaire: (produitData['prix'] ?? produitData['prix_unitaire'] ?? 0)
            .toDouble(),
        montantTotal: (produitData['montant_total'] ??
                (produitData['poids'] ?? 0).toDouble() *
                    (produitData['prix'] ?? 0).toDouble())
            .toDouble(),
        predominanceFlorale: produitData['predominance_florale']?.toString(),
        controlInfo: controlInfo, // ‚úÖ AJOUT√â: Inclure les infos de contr√¥le
      ));
    }

    // R√©cup√©ration des informations g√©ographiques depuis listes_scoop
    String? region, province, commune, village;
    final scoopId = data['scoop_id']?.toString();

    if (kDebugMode) {
      print('ü•Ñ === R√âCUP√âRATION INFOS G√âOGRAPHIQUES SCOOP ===');
      print('ü•Ñ SCOOP ID extrait: $scoopId');
      print('ü•Ñ Chemin de recherche: Sites/$site/listes_scoop/$scoopId');
    }

    if (scoopId != null && scoopId.isNotEmpty) {
      try {
        if (kDebugMode) {
          print('ü•Ñ üîç Recherche du SCOOP dans la base...');
        }

        final scoopDoc = await _firestore
            .collection('Sites')
            .doc(site)
            .collection('listes_scoop')
            .doc(scoopId)
            .get();

        if (kDebugMode) {
          print('ü•Ñ üìÑ Document SCOOP trouv√©: ${scoopDoc.exists}');
        }

        if (scoopDoc.exists) {
          final scoopData = scoopDoc.data()!;
          region = scoopData['region']?.toString();
          province = scoopData['province']?.toString();
          commune = scoopData['commune']?.toString();
          village = scoopData['village']?.toString();

          if (kDebugMode) {
            print('ü•Ñ ‚úÖ DONN√âES SCOOP TROUV√âES:');
            print('ü•Ñ    - Nom SCOOP: ${scoopData['nom']}');
            print('ü•Ñ    - Pr√©sident: ${scoopData['president']}');
            print('ü•Ñ    - R√©gion: $region');
            print('ü•Ñ    - Province: $province');
            print('ü•Ñ    - Commune: $commune');
            print('ü•Ñ    - Village: $village');
            print('ü•Ñ    - Donn√©es compl√®tes: $scoopData');
          }
        } else {
          if (kDebugMode) {
            print('ü•Ñ ‚ùå SCOOP NON TROUV√â dans listes_scoop!');
            print(
                'ü•Ñ V√©rifiez que le SCOOP existe dans Sites/$site/listes_scoop/$scoopId');
          }
        }
      } catch (e) {
        if (kDebugMode) {
          print('ü•Ñ ‚ùå ERREUR r√©cup√©ration info g√©ographiques SCOOP: $e');
          print('ü•Ñ Stack trace: ${StackTrace.current}');
        }
      }
    } else {
      if (kDebugMode) {
        print(
            'ü•Ñ ‚ö†Ô∏è SCOOP ID vide ou null - impossible de r√©cup√©rer les infos g√©ographiques');
      }
    }

    // Extraction de la localisation (fallback)
    final localisation = data['localisation']?.toString() ??
        (region != null
            ? '$region ‚Ä∫ $province ‚Ä∫ $commune'
            : '$site, Centre-Ouest, Boulkiemd√©');

    final scoop = Scoop(
      id: docId,
      path: 'Sites/$site/nos_achats_scoop_contenants/$docId',
      site: site,
      date: _extractDate(data),
      technicien: data['collecteur_nom']?.toString() ??
          data['technicien_nom']?.toString(),
      statut: data['statut']?.toString() ?? data['status']?.toString(),
      totalWeight: (data['poids_total'] ?? data['totalWeight'] ?? 0).toDouble(),
      totalAmount:
          (data['montant_total'] ?? data['totalAmount'] ?? 0).toDouble(),
      scoopNom: data['scoop_nom']?.toString() ??
          data['scoop_name']?.toString() ??
          'SCOOP $site',
      periodeCollecte: data['periode_collecte']?.toString() ??
          _formatPeriodeFromDate(_extractDate(data)),
      qualite: data['qualite']?.toString(),
      localisation: localisation,
      region: region,
      province: province,
      commune: commune,
      village: village,
      contenants: contenants,
    );

    if (kDebugMode) {
      print('ü•Ñ ===== SCOOP MAPP√â AVEC SUCC√àS =====');
      print('ü•Ñ ID: ${scoop.id}');
      print('ü•Ñ Nom SCOOP: ${scoop.scoopNom}');
      print('ü•Ñ Date: ${scoop.date}');
      print('ü•Ñ Technicien: ${scoop.technicien}');
      print('ü•Ñ Statut: ${scoop.statut}');
      print('ü•Ñ Poids total: ${scoop.totalWeight} kg');
      print('ü•Ñ Montant total: ${scoop.totalAmount} FCFA');
      print('ü•Ñ P√©riode: ${scoop.periodeCollecte}');
      print('ü•Ñ Qualit√©: ${scoop.qualite}');
      print('ü•Ñ Localisation: ${scoop.localisation}');
      print('ü•Ñ R√©gion: ${scoop.region}');
      print('ü•Ñ Province: ${scoop.province}');
      print('ü•Ñ Commune: ${scoop.commune}');
      print('ü•Ñ Village: ${scoop.village}');
      print('ü•Ñ Nombre de contenants: ${scoop.contenants.length}');
      for (int i = 0; i < scoop.contenants.length; i++) {
        final c = scoop.contenants[i];
        print(
            'ü•Ñ   Contenant ${i + 1} (${c.id}): ${c.typeContenant} ${c.typeMiel} - ${c.quantite}kg √† ${c.prixUnitaire} FCFA/kg = ${c.montantTotal} FCFA');
      }
      print('ü•Ñ =====================================');
    }

    return scoop;
  }

  /// Convertit les donn√©es Firestore legacy en mod√®le Scoop
  static Scoop _mapToScoopLegacy(
      String docId, String site, Map<String, dynamic> data) {
    final contenants = <ScoopContenant>[];

    // Conversion des contenants legacy
    final detailsData = data['details'] as List<dynamic>? ??
        data['produits'] as List<dynamic>? ??
        [];
    for (int i = 0; i < detailsData.length; i++) {
      final detailData = detailsData[i] as Map<String, dynamic>;
      contenants.add(ScoopContenant(
        id: '$docId-d${i + 1}',
        typeContenant:
            detailData['containerType']?.toString() ?? 'Non sp√©cifi√©',
        typeMiel: detailData['typeMiel']?.toString() ?? 'Non sp√©cifi√©',
        quantite:
            (detailData['quantite'] ?? detailData['weight'] ?? 0).toDouble(),
        prixUnitaire:
            (detailData['prixUnitaire'] ?? detailData['unitPrice'] ?? 0)
                .toDouble(),
        montantTotal:
            (detailData['montantTotal'] ?? detailData['total'] ?? 0).toDouble(),
      ));
    }

    return Scoop(
      id: docId,
      path: '$site/collectes_scoop/collectes_scoop/$docId',
      site: site,
      date: _extractDate(data),
      technicien: data['technicien_nom']?.toString(),
      statut: data['status']?.toString(),
      totalWeight: (data['totalWeight'] ?? 0).toDouble(),
      totalAmount: (data['totalAmount'] ?? 0).toDouble(),
      scoopNom: data['scoop_name']?.toString() ?? 'SCOOP $site',
      periodeCollecte: _formatPeriodeFromDate(_extractDate(data)),
      qualite: data['qualite']?.toString(),
      localisation:
          '$site > Province > Commune', // Valeur par d√©faut pour legacy
      region: null, // Legacy n'a pas d'infos g√©ographiques d√©taill√©es
      province: null,
      commune: null,
      village: null,
      contenants: contenants,
    );
  }

  /// Convertit les donn√©es Firestore en mod√®le Individuel (avec infos g√©ographiques)
  static Future<Individuel> _mapToIndividuelAsync(
      String docId, String site, Map<String, dynamic> data) async {
    final contenants = <IndividuelContenant>[];

    if (kDebugMode) {
      print('üë§ ===== D√âBUT MAPPING INDIVIDUEL $docId =====');
      print('üë§ Site: $site');
      print('üë§ Champs disponibles: ${data.keys.toList()}');
      print('üë§ Donn√©es brutes compl√®tes: $data');
      print('üë§ ==========================================');
    }

    // Conversion des contenants - ID maintenant inclus dans le mod√®le
    final contenantsData = data['contenants'] as List<dynamic>? ?? [];
    for (int i = 0; i < contenantsData.length; i++) {
      final contenant = contenantsData[i] as Map<String, dynamic>;

      if (kDebugMode) {
        print('üë§ === CONTENANT ${i + 1} ===');
        print('üë§ Donn√©es brutes: ${contenant.keys.toList()}');
      }

      // R√©cup√©rer les informations de contr√¥le si elles existent
      ContainerControlInfo controlInfo = const ContainerControlInfo();
      if (contenant['controlInfo'] != null) {
        try {
          final controlInfoData =
              contenant['controlInfo'] as Map<String, dynamic>;
          controlInfo = ContainerControlInfo.fromMap(controlInfoData);
        } catch (e) {
          if (kDebugMode) {
            print('‚ö†Ô∏è Erreur lors de la lecture du controlInfo Individuel: $e');
          }
        }
      }

      // L'ID est maintenant directement r√©cup√©r√© du mod√®le
      final contenantId = contenant['id']?.toString() ??
          'C${(i + 1).toString().padLeft(3, '0')}_individuel';

      if (kDebugMode) {
        print('üë§ Contenant individuel ${i + 1}: ID = $contenantId');
      }

      contenants.add(IndividuelContenant(
        id: contenantId, // ‚úÖ ID du contenant (maintenant inclus dans le mod√®le)
        typeContenant:
            contenant['type_contenant']?.toString() ?? 'Non sp√©cifi√©',
        typeMiel: contenant['type_miel']?.toString() ??
            contenant['origine_florale']?.toString() ??
            'Non sp√©cifi√©',
        quantite:
            (contenant['quantite_kg'] ?? contenant['quantite'] ?? 0).toDouble(),
        prixUnitaire: (contenant['prix_unitaire'] ?? 0).toDouble(),
        montantTotal: (contenant['montant_total'] ?? 0).toDouble(),
        controlInfo: controlInfo, // ‚úÖ AJOUT√â: Inclure les infos de contr√¥le
      ));
    }

    // Conversion des origines florales
    final originesFlorales = <String>[];
    final floralesData = data['origines_florales'];
    if (floralesData is List) {
      originesFlorales.addAll(floralesData.map((e) => e.toString()));
    }

    // R√©cup√©ration des informations g√©ographiques depuis listes_prod
    String? region, province, commune, village;
    final producteurId = data['id_producteur']?.toString();

    if (kDebugMode) {
      print('üë§ === R√âCUP√âRATION INFOS G√âOGRAPHIQUES PRODUCTEUR ===');
      print('üë§ Producteur ID extrait: $producteurId');
      print('üë§ Chemin de recherche: Sites/$site/listes_prod/$producteurId');
    }

    if (producteurId != null && producteurId.isNotEmpty) {
      try {
        if (kDebugMode) {
          print('üë§ üîç Recherche du producteur dans la base...');
        }

        final producteurDoc = await _firestore
            .collection('Sites')
            .doc(site)
            .collection('listes_prod')
            .doc(producteurId)
            .get();

        if (kDebugMode) {
          print('üë§ üìÑ Document producteur trouv√©: ${producteurDoc.exists}');
        }

        if (producteurDoc.exists) {
          final producteurData = producteurDoc.data()!;
          final localisationData =
              producteurData['localisation'] as Map<String, dynamic>?;

          if (kDebugMode) {
            print('üë§ ‚úÖ DONN√âES PRODUCTEUR TROUV√âES:');
            print('üë§    - Nom: ${producteurData['nomPrenom']}');
            print('üë§    - T√©l√©phone: ${producteurData['telephone']}');
            print('üë§    - Sexe: ${producteurData['sexe']}');
            print('üë§    - √Çge: ${producteurData['age']}');
            print('üë§    - Localisation data: $localisationData');
          }

          if (localisationData != null) {
            region = localisationData['region']?.toString();
            province = localisationData['province']?.toString();
            commune = localisationData['commune']?.toString();
            village = localisationData['village']?.toString();

            if (kDebugMode) {
              print('üë§ üìç INFOS G√âOGRAPHIQUES EXTRAITES:');
              print('üë§    - R√©gion: $region');
              print('üë§    - Province: $province');
              print('üë§    - Commune: $commune');
              print('üë§    - Village: $village');
            }
          } else {
            if (kDebugMode) {
              print(
                  'üë§ ‚ö†Ô∏è Aucune donn√©e de localisation trouv√©e dans le document producteur');
            }
          }
        } else {
          if (kDebugMode) {
            print('üë§ ‚ùå PRODUCTEUR NON TROUV√â dans listes_prod!');
            print(
                'üë§ V√©rifiez que le producteur existe dans Sites/$site/listes_prod/$producteurId');
          }
        }
      } catch (e) {
        if (kDebugMode) {
          print('üë§ ‚ùå ERREUR r√©cup√©ration info g√©ographiques producteur: $e');
          print('üë§ Stack trace: ${StackTrace.current}');
        }
      }
    } else {
      if (kDebugMode) {
        print(
            'üë§ ‚ö†Ô∏è Producteur ID vide ou null - impossible de r√©cup√©rer les infos g√©ographiques');
      }
    }

    // G√©n√©ration de localisation (fallback)
    String? localisation;
    if (region != null) {
      localisation = '$region ‚Ä∫ $province ‚Ä∫ $commune ‚Ä∫ $village';
    } else {
      // Fallback vers les anciennes donn√©es
      final producteurLocalisation =
          data['producteur_localisation'] as Map<String, dynamic>?;
      if (producteurLocalisation != null) {
        final parts = [
          producteurLocalisation['region'],
          producteurLocalisation['province'],
          producteurLocalisation['commune'],
          producteurLocalisation['village'],
        ].where((part) => part != null && part.toString().isNotEmpty);
        localisation = parts.join(' ‚Ä∫ ');
      }
    }

    final individuel = Individuel(
      id: docId,
      path: 'Sites/$site/nos_achats_individuels/$docId',
      site: site,
      date: _extractDate(data),
      technicien: data['collecteur_nom']?.toString() ??
          data['technicien_nom']?.toString(),
      statut: data['statut']?.toString() ?? data['status']?.toString(),
      totalWeight: (data['poids_total'] ?? data['totalWeight'] ?? 0).toDouble(),
      totalAmount:
          (data['montant_total'] ?? data['totalAmount'] ?? 0).toDouble(),
      nomProducteur: data['nom_producteur']?.toString() ?? 'Producteur inconnu',
      originesFlorales: originesFlorales,
      observations: data['observations']?.toString(),
      localisation: localisation ?? '$site ‚Ä∫ Province ‚Ä∫ Commune',
      region: region,
      province: province,
      commune: commune,
      village: village,
      contenants: contenants,
    );

    if (kDebugMode) {
      print('üë§ ===== INDIVIDUEL MAPP√â AVEC SUCC√àS =====');
      print('üë§ ID: ${individuel.id}');
      print('üë§ Nom producteur: ${individuel.nomProducteur}');
      print('üë§ Date: ${individuel.date}');
      print('üë§ Technicien: ${individuel.technicien}');
      print('üë§ Statut: ${individuel.statut}');
      print('üë§ Poids total: ${individuel.totalWeight} kg');
      print('üë§ Montant total: ${individuel.totalAmount} FCFA');
      print('üë§ Localisation: ${individuel.localisation}');
      print('üë§ R√©gion: ${individuel.region}');
      print('üë§ Province: ${individuel.province}');
      print('üë§ Commune: ${individuel.commune}');
      print('üë§ Village: ${individuel.village}');
      print('üë§ Origines florales: ${individuel.originesFlorales}');
      print('üë§ Observations: ${individuel.observations}');
      print('üë§ Nombre de contenants: ${individuel.contenants.length}');
      for (int i = 0; i < individuel.contenants.length; i++) {
        final c = individuel.contenants[i];
        print(
            'üë§   Contenant ${i + 1} (${c.id}): ${c.typeContenant} ${c.typeMiel} - ${c.quantite}kg √† ${c.prixUnitaire} FCFA/kg = ${c.montantTotal} FCFA');
      }
      print('üë§ ==========================================');
    }

    return individuel;
  }

  /// R√©cup√®re les collectes de miellerie
  static Future<List<Miellerie>> _getMiellerie(String site) async {
    final mielleries = <Miellerie>[];

    try {
      // Chemin: Sites/{site}/nos_collecte_mielleries
      final snapshot = await _firestore
          .collection('Sites')
          .doc(site)
          .collection('nos_collecte_mielleries')
          .orderBy('created_at', descending: true)
          .get();

      for (final doc in snapshot.docs) {
        try {
          final data = doc.data();
          final miellerie = _mapToMiellerie(doc.id, site, data);
          mielleries.add(miellerie);
        } catch (e) {
          print('‚ö†Ô∏è Erreur conversion miellerie ${doc.id}: $e');
        }
      }

      print(
          '‚úÖ ${mielleries.length} mielleries charg√©es depuis Sites/$site/nos_collecte_mielleries');
    } catch (e) {
      print('‚ùå Erreur chargement mielleries pour $site: $e');
    }

    return mielleries;
  }

  /// Mappe les donn√©es Firestore vers un objet Miellerie
  static Miellerie _mapToMiellerie(String docId, String site, Map<String, dynamic> data) {
    // Extraction des contenants avec IDs
    final contenantsData = data['contenants'] as List<dynamic>? ?? [];
    final contenants = <MiellerieContenant>[];

    for (int i = 0; i < contenantsData.length; i++) {
      final contenantData = contenantsData[i] as Map<String, dynamic>;
      
      // G√©n√©rer un ID si manquant (pour compatibilit√© avec anciens enregistrements)
      final containerId = contenantData['id'] ?? 'C${(i + 1).toString().padLeft(3, '0')}_miellerie';
      
      final contenant = MiellerieContenant(
        id: containerId,
        typeContenant: contenantData['type_contenant']?.toString() ?? '',
        typeMiel: contenantData['type_collecte']?.toString() ?? '',
        quantite: (contenantData['quantite'] ?? 0).toDouble(),
        prixUnitaire: (contenantData['prix_unitaire'] ?? 0).toDouble(),
        montantTotal: (contenantData['montant_total'] ?? 0).toDouble(),
        observations: contenantData['notes']?.toString(),
      );
      contenants.add(contenant);
    }

    // Calculs des totaux
    double totalWeight = contenants.fold(0.0, (sum, c) => sum + c.quantite);
    double totalAmount = contenants.fold(0.0, (sum, c) => sum + c.montantTotal);

    final miellerie = Miellerie(
      id: docId,
      path: 'Sites/$site/nos_collecte_mielleries/$docId',
      site: site,
      date: _extractDate(data),
      technicien: data['collecteur_nom']?.toString(),
      statut: data['statut']?.toString() ?? 'collecte_terminee',
      totalWeight: totalWeight,
      totalAmount: totalAmount,
      containersCount: contenants.length,
      collecteurNom: data['collecteur_nom']?.toString() ?? '',
      miellerieNom: data['miellerie_nom']?.toString() ?? '',
      localite: data['localite']?.toString() ?? '',
      cooperativeNom: data['cooperative_nom']?.toString() ?? '',
      repondant: data['repondant']?.toString() ?? '',
      contenants: contenants,
      observations: data['observations']?.toString(),
    );

    if (kDebugMode) {
      print('üçØ ===== MIELLERIE MAPP√âE AVEC SUCC√àS =====');
      print('üçØ ID: ${miellerie.id}');
      print('üçØ Collecteur: ${miellerie.collecteurNom}');
      print('üçØ Miellerie: ${miellerie.miellerieNom}');
      print('üçØ Localit√©: ${miellerie.localite}');
      print('üçØ Coop√©rative: ${miellerie.cooperativeNom}');
      print('üçØ Date: ${miellerie.date}');
      print('üçØ Statut: ${miellerie.statut}');
      print('üçØ Poids total: ${miellerie.totalWeight} kg');
      print('üçØ Montant total: ${miellerie.totalAmount} FCFA');
      print('üçØ Nombre de contenants: ${miellerie.contenants.length}');
      for (int i = 0; i < miellerie.contenants.length; i++) {
        final c = miellerie.contenants[i];
        print(
            'üçØ   Contenant ${i + 1} (${c.id}): ${c.typeContenant} ${c.typeMiel} - ${c.quantite}kg √† ${c.prixUnitaire} FCFA/kg = ${c.montantTotal} FCFA');
      }
      print('üçØ ==========================================');
    }

    return miellerie;
  }

  /// Extrait la date depuis les donn√©es Firestore
  static DateTime _extractDate(Map<String, dynamic> data) {
    // Essayer diff√©rents champs de date
    final dateFields = [
      'date_achat',
      'created_at',
      'createdAt',
      'date_collecte'
    ];

    for (final field in dateFields) {
      final dateValue = data[field];
      if (dateValue != null) {
        if (dateValue is Timestamp) {
          return dateValue.toDate();
        } else if (dateValue is String) {
          try {
            return DateTime.parse(dateValue);
          } catch (e) {
            continue;
          }
        }
      }
    }

    return DateTime.now();
  }

  /// Formate une p√©riode √† partir d'une date
  static String _formatPeriodeFromDate(DateTime date) {
    final monthNames = [
      'Jan',
      'F√©v',
      'Mar',
      'Avr',
      'Mai',
      'Juin',
      'Juil',
      'Ao√ªt',
      'Sep',
      'Oct',
      'Nov',
      'D√©c'
    ];

    return '${monthNames[date.month - 1]} ${date.year}';
  }

  /// R√©cup√®re les options de filtrage bas√©es sur les donn√©es r√©elles
  static Future<Map<String, List<String>>> getFilterOptions(
      Map<Section, List<BaseCollecte>> data) async {
    final sites = <String>{};
    final techniciens = <String>{};
    final statuses = <String>{};

    for (final sectionData in data.values) {
      for (final collecte in sectionData) {
        sites.add(collecte.site);
        if (collecte.technicien != null && collecte.technicien!.isNotEmpty) {
          techniciens.add(collecte.technicien!);
        }
        if (collecte.statut != null && collecte.statut!.isNotEmpty) {
          statuses.add(collecte.statut!);
        }
      }
    }

    return {
      'sites': sites.toList()..sort(),
      'techniciens': techniciens.toList()..sort(),
      'statuses': statuses.toList()..sort(),
    };
  }
}
