import 'dart:async';
import 'dart:convert';
import 'package:get/get.dart';
import 'global_refresh_service.dart';
import '../models/collecte_models.dart';
import 'package:flutter/foundation.dart';
import '../models/quality_control_models.dart';
import '../../../authentication/user_session.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../quality_control/services/quality_computation_service.dart';

// Service pour la gestion des donn√©es de contr√¥le qualit√©
/// R√©sultat d'une mise √† jour de collecte
class CollecteUpdateResult {
  final bool success;
  final String? collecteId;
  final String? collectionPath;

  const CollecteUpdateResult({
    required this.success,
    this.collecteId,
    this.collectionPath,
  });

  factory CollecteUpdateResult.success(
      {required String collecteId, String? collectionPath}) {
    return CollecteUpdateResult(
      success: true,
      collecteId: collecteId,
      collectionPath: collectionPath,
    );
  }

  factory CollecteUpdateResult.failure() {
    return const CollecteUpdateResult(success: false);
  }
}

/// Service pour sauvegarder et r√©cup√©rer les donn√©es de contr√¥le qualit√©
class QualityControlService {
  static final QualityControlService _instance =
      QualityControlService._internal();
  factory QualityControlService() => _instance;
  QualityControlService._internal();

  // Instance Firestore
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // R√®gles et calculs m√©tier
  final QualityComputationService _computation =
      const QualityComputationService();

  // Stockage en m√©moire pour cache (optionnel)
  final Map<String, QualityControlData> _qualityControlsCache = {};

  // Cache optimis√© par collecte pour r√©duire les requ√™tes
  final Map<String, Map<String, dynamic>> _collecteControlStatsCache = {};
  final Map<String, DateTime> _cacheTimestamps = {};

  // Stream controllers pour les mises √† jour en temps r√©el
  final StreamController<Map<String, QualityControlData>>
      _controlsStreamController =
      StreamController<Map<String, QualityControlData>>.broadcast();
  final StreamController<QualityStats> _statsStreamController =
      StreamController<QualityStats>.broadcast();

  // Streams publics pour √©couter les changements
  Stream<Map<String, QualityControlData>> get controlsStream =>
      _controlsStreamController.stream;
  Stream<QualityStats> get statsStream => _statsStreamController.stream;

  // Derni√®res statistiques calcul√©es
  QualityStats? _lastStats;

  /// Sauvegarde un contr√¥le qualit√©
  Future<bool> saveQualityControl(QualityControlData data,
      {String? collecteId}) async {
    try {
      // R√©cup√©rer le site de l'utilisateur connect√©
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';

      // üÜï Cr√©er un ID unique pour le document qui inclut l'ID de la collecte si disponible
      // Nettoyer le code de contenant pour √©viter les caract√®res sp√©ciaux
      final cleanContainerCode = _cleanContainerCode(data.containerCode);
      final cleanCollecteId =
          collecteId != null ? _cleanComponent(collecteId) : null;

      final docId = cleanCollecteId != null
          ? '${cleanContainerCode}_${cleanCollecteId}_${data.receptionDate.millisecondsSinceEpoch}'
          : '${cleanContainerCode}_${data.receptionDate.millisecondsSinceEpoch}';

      // Calculs m√©tiers avant sauvegarde
      final trimmedObservation = data.observations?.trim();
      final normalizedObservation =
          (trimmedObservation == null || trimmedObservation.isEmpty)
              ? null
              : trimmedObservation;

      final observationError = _computation.validateObservation(
          data.conformityStatus, normalizedObservation);
      if (observationError != null) {
        throw ArgumentError(observationError);
      }

      final containerTypeEnum = _resolveContainerType(data.containerType);
      final computedWater = data.waterContent ??
          _computation.computeWaterContent(
            containerType: containerTypeEnum,
            odorProfile: data.odorProfile,
            depositLevel: data.depositLevel,
            manualMeasure: data.manualWaterContent,
          );

      final controllerName = (data.controllerName?.trim().isNotEmpty ?? false)
          ? data.controllerName!.trim()
          : (userSession.nom ?? 'Contr√¥leur');

      final normalizedData = data.copyWith(
        waterContent: computedWater,
        controllerName: controllerName,
        observations: normalizedObservation,
      );

      // Pr√©parer les donn√©es pour Firestore
      final firestoreData = {
        'id': docId,
        'containerCode': normalizedData.containerCode,
        'receptionDate': Timestamp.fromDate(normalizedData.receptionDate),
        'producer': normalizedData.producer,
        'apiaryVillage': normalizedData.apiaryVillage,
        'hiveType': normalizedData.hiveType,
        'collectionStartDate': normalizedData.collectionStartDate != null
            ? Timestamp.fromDate(normalizedData.collectionStartDate!)
            : null,
        'collectionEndDate': normalizedData.collectionEndDate != null
            ? Timestamp.fromDate(normalizedData.collectionEndDate!)
            : null,
        'honeyNature': normalizedData.honeyNature.name,
        'containerType': normalizedData.containerType,
        'containerNumber': normalizedData.containerNumber,
        'totalWeight': normalizedData.totalWeight,
        'honeyWeight': normalizedData.honeyWeight,
        'quality': normalizedData.quality,
        'waterContent': normalizedData.waterContent,
        'manualWaterContent': normalizedData.manualWaterContent,
        'odorProfile': normalizedData.odorProfile.name,
        'depositLevel': normalizedData.depositLevel.name,
        'pollenLostKg': normalizedData.pollenLostKg,
        'residuePercent': normalizedData.residuePercent,
        'floralPredominance': normalizedData.floralPredominance,
        'conformityStatus': normalizedData.conformityStatus.name,
        'nonConformityCause': normalizedData.nonConformityCause,
        'observations': normalizedData.observations,
        'controllerName': normalizedData.controllerName,
        'createdAt': Timestamp.fromDate(normalizedData.createdAt),
        'site': siteUtilisateur,
        'dateCreation': FieldValue.serverTimestamp(),
        'derniereMiseAJour': FieldValue.serverTimestamp(),
        // üÜï Champs pour optimisation interface
        'collecteId':
            collecteId, // üîß CORRECTION: Utiliser le collecteId pass√© en param√®tre
        'collectionPath': null, // Chemin vers la collection d'origine
      };

      // Sauvegarder dans Firestore : Collection "controles_qualite" organis√©e par site
      await _firestore
          .collection('controles_qualite')
          .doc(siteUtilisateur)
          .collection('controles')
          .doc(docId)
          .set(firestoreData);

      // Mettre √† jour le cache local
      _qualityControlsCache[docId] = normalizedData;

      if (kDebugMode) {
        print(
            '‚úÖ Contr√¥le qualit√© sauvegard√© en Firestore: controles_qualite/$siteUtilisateur/controles/$docId');
        print('üìä Contenant: ${data.containerCode}');
        print(
            'üÜî CollecteId: $collecteId ${collecteId != null ? "(‚úÖ LIEN √âTABLI)" : "(‚ùå MANQUANT)"}');
        print('üë§ Contr√¥leur: ${normalizedData.controllerName}');
        print('‚úÖ Conformit√©: ${normalizedData.conformityStatus.name}');
        print('‚öñÔ∏è Poids total: ${normalizedData.totalWeight} kg');
        print('üçØ Poids miel: ${normalizedData.honeyWeight} kg');
        print(
            'üíß Teneur en eau calcul√©e: ${normalizedData.waterContent?.toStringAsFixed(2) ?? '-'}%');
        print('üåº Pollen perdu: ${normalizedData.pollenLostKg ?? 0} kg');
        print('üß™ R√©sidus: ${normalizedData.residuePercent ?? 0}%');
      }

      // Mettre √† jour le cache local
      _qualityControlsCache[docId] = normalizedData;

      // Mettre √† jour le champ de contr√¥le dans la collecte source
      await _updateCollecteControlStatus(normalizedData);

      // Notifier les listeners des changements
      _notifyListeners();

      // üÜï INVALIDATION IMM√âDIATE DU CACHE avant les notifications
      // On utilise le containerCode pour invalider tous les caches potentiels
      _invalidateAllRelatedCaches(data.containerCode);

      // Notifier le service global pour rafra√Æchir les autres pages
      GlobalRefreshService().notifyQualityControlUpdate(data.containerCode);
      GlobalRefreshService().notifyCollecteUpdate(data.containerCode);

      // üÜï Notification sp√©cifique pour synchronisation interface
      GlobalRefreshService().notifyInterfaceSync(
        action: 'quality_control_updated',
        collecteId: collecteId ?? data.containerCode,
        containerCode: data.containerCode,
        additionalData: {
          'conformityStatus': normalizedData.conformityStatus.name,
          'controllerName': normalizedData.controllerName,
        },
      );

      if (kDebugMode) {
        print('‚úÖ Contr√¥le qualit√© sauvegard√© avec succ√®s: $docId');
        print('üìù Collecte mise √† jour avec l\'information de contr√¥le');
        print('üì¢ Notification envoy√©e aux autres pages');
      }

      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la sauvegarde Firestore: $e');
      }
      return false;
    }
  }

  /// R√©cup√®re un contr√¥le qualit√© par code de contenant
  Future<QualityControlData?> getQualityControl(
      String containerCode, DateTime receptionDate,
      {String? collecteId}) async {
    try {
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';

      // üÜï G√©n√©rer un docId unique qui inclut l'ID de la collecte si disponible
      // Nettoyer les composants pour √©viter les caract√®res sp√©ciaux
      final cleanContainerCode = _cleanContainerCode(containerCode);
      final cleanCollecteId =
          collecteId != null ? _cleanComponent(collecteId) : null;

      final docId = cleanCollecteId != null
          ? '${cleanContainerCode}_${cleanCollecteId}_${receptionDate.millisecondsSinceEpoch}'
          : '${cleanContainerCode}_${receptionDate.millisecondsSinceEpoch}';

      if (kDebugMode) {
        print('üîç QUALITY: Recherche contr√¥le pour $containerCode');
        print('   - Site: $siteUtilisateur');
        print('   - DocId: $docId');
        print('   - Date: $receptionDate');
        print('   - CollecteId: $collecteId');
      }

      // V√©rifier d'abord le cache
      if (_qualityControlsCache.containsKey(docId)) {
        if (kDebugMode) {
          print('‚úÖ QUALITY: Contr√¥le trouv√© dans le cache pour $containerCode');
        }
        return _qualityControlsCache[docId];
      }

      if (kDebugMode) {
        print('üîç QUALITY: Recherche dans Firestore pour $containerCode...');
        print('   - Collection: controles_qualite/$siteUtilisateur/controles');
        print('   - Document: $docId');
      }

      // R√©cup√©rer depuis Firestore
      final doc = await _firestore
          .collection('controles_qualite')
          .doc(siteUtilisateur)
          .collection('controles')
          .doc(docId)
          .get();

      if (doc.exists && doc.data() != null) {
        final data = doc.data()!;
        final qualityControl = QualityControlData.fromFirestore(data,
            documentId: docId); // üÜï Passer le documentId

        // Mettre en cache
        _qualityControlsCache[docId] = qualityControl;

        if (kDebugMode) {
          print(
              '‚úÖ QUALITY: Contr√¥le trouv√© dans Firestore pour $containerCode');
          print('   - Statut: ${qualityControl.conformityStatus}');
          print('   - Nature: ${qualityControl.honeyNature}');
        }

        return qualityControl;
      }

      if (kDebugMode) {
        print('‚ùå QUALITY: Aucun contr√¥le trouv√© pour $containerCode');
        print('   - Doc exists: ${doc.exists}');
        print('   - Has data: ${doc.data() != null}');
      }

      // Essayer une recherche alternative par containerCode seulement
      if (kDebugMode) {
        print(
            'üîç QUALITY: Tentative de recherche alternative par containerCode...');
      }

      final querySnapshot = await _firestore
          .collection('controles_qualite')
          .doc(siteUtilisateur)
          .collection('controles')
          .where('containerCode', isEqualTo: containerCode)
          .limit(1)
          .get();

      if (querySnapshot.docs.isNotEmpty) {
        final doc = querySnapshot.docs.first;
        final data = doc.data();
        final qualityControl = QualityControlData.fromFirestore(data,
            documentId: doc.id); // üÜï Passer le documentId r√©el

        // Mettre en cache avec la cl√© originale
        _qualityControlsCache[docId] = qualityControl;

        if (kDebugMode) {
          print(
              '‚úÖ QUALITY: Contr√¥le trouv√© par recherche alternative pour $containerCode');
          print('   - Document ID: ${doc.id}');
          print('   - Statut: ${qualityControl.conformityStatus}');
        }

        return qualityControl;
      }

      return null;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la r√©cup√©ration Firestore: $e');
      }
      return null;
    }
  }

  /// R√©cup√®re tous les contr√¥les qualit√© disponibles
  List<QualityControlData> getAllQualityControls() {
    return _qualityControlsCache.values.toList();
  }

  /// V√©rifie si un contenant sp√©cifique est contr√¥l√© (alias pour simplicit√©)
  Future<bool> isContainerControlled(
      String containerCode, DateTime receptionDate,
      {String? collecteId}) async {
    final control = await getQualityControl(containerCode, receptionDate,
        collecteId: collecteId);
    return control != null;
  }

  /// Obtient les statistiques de contr√¥le pour une liste de contenants
  Future<Map<String, int>> getControlStatsForContainers(
      List<String> containerCodes, DateTime receptionDate) async {
    int controlledCount = 0;

    for (final code in containerCodes) {
      if (await isContainerControlled(code, receptionDate)) {
        controlledCount++;
      }
    }

    return {
      'total': containerCodes.length,
      'controlled': controlledCount,
      'uncontrolled': containerCodes.length - controlledCount,
    };
  }

  /// NOUVELLE M√âTHODE OPTIMIS√âE: Obtient les statistiques de contr√¥le directement depuis les donn√©es de collecte
  Map<String, int> getControlStatsFromCollecteData(dynamic collecteData) {
    if (kDebugMode) {
      print('üîç ===== D√âBUT getControlStatsFromCollecteData =====');
      print('üîç CollecteData type: ${collecteData.runtimeType}');
      print('üîç CollecteData null: ${collecteData == null}');
    }

    if (collecteData == null) {
      if (kDebugMode) {
        print('‚ùå CollecteData est null - retour stats vides');
      }
      return {'total': 0, 'controlled': 0, 'uncontrolled': 0};
    }

    // CORRECTION: Acc√©der aux donn√©es depuis l'objet collecte
    List<dynamic> contenants;

    // G√©rer les diff√©rents types d'objets collecte
    if (collecteData is Map<String, dynamic>) {
      if (kDebugMode) {
        print('üìÑ CollecteData est Map<String, dynamic>');
        print('üìÑ Cl√©s disponibles: ${collecteData.keys.toList()}');
      }
      contenants = collecteData['contenants'] as List<dynamic>? ?? [];
      if (kDebugMode) {
        print('üìÑ Contenants extraits de Map: ${contenants.length} √©l√©ments');
      }
    } else {
      if (kDebugMode) {
        print('üìÑ CollecteData est objet (${collecteData.runtimeType})');
      }
      // Pour les objets de type Recolte, Scoop, etc.
      try {
        contenants =
            (collecteData as dynamic).contenants as List<dynamic>? ?? [];
        if (kDebugMode) {
          print(
              'üìÑ Contenants extraits directement: ${contenants.length} √©l√©ments');
        }
      } catch (e) {
        if (kDebugMode) {
          print('‚ö†Ô∏è Erreur acc√®s direct contenants: $e');
          print('‚ö†Ô∏è Tentative toMap()...');
        }
        // Fallback vers toMap si disponible
        try {
          final collecteMap =
              (collecteData as dynamic).toMap() as Map<String, dynamic>;
          contenants = collecteMap['contenants'] as List<dynamic>? ?? [];
          if (kDebugMode) {
            print(
                'üìÑ Contenants extraits via toMap(): ${contenants.length} √©l√©ments');
          }
        } catch (e2) {
          if (kDebugMode) {
            print('‚ùå Erreur toMap(): $e2');
          }
          return {'total': 0, 'controlled': 0, 'uncontrolled': 0};
        }
      }
    }

    if (contenants.isEmpty) {
      if (kDebugMode) {
        print('‚ùå Contenants vide - retour stats vides');
      }
      return {'total': 0, 'controlled': 0, 'uncontrolled': 0};
    }

    if (kDebugMode) {
      print('üìä ANALYSE DE ${contenants.length} CONTENANTS:');
    }

    int controlledCount = 0;
    int totalCount = 0;

    for (final contenant in contenants) {
      totalCount++;
      if (kDebugMode) {
        print('üì¶ --- CONTENANT ${totalCount} ---');
        print('üì¶ Type: ${contenant.runtimeType}');
      }

      // V√©rifier si le contenant a un champ controlInfo avec isControlled = true
      try {
        String contenantId = 'ID_INCONNU';
        bool isControlled = false;

        // CORRECTION: G√©rer les diff√©rents types de contenants
        if (contenant is Map<String, dynamic>) {
          // Donn√©es brutes depuis Firestore (cas Map)
          contenantId = contenant['id']?.toString() ?? 'ID_MANQUANT';
          final controlInfo = contenant['controlInfo'] as Map<String, dynamic>?;
          isControlled =
              controlInfo != null && controlInfo['isControlled'] == true;

          if (kDebugMode) {
            print('üì¶ ID (Map): $contenantId');
            print('üì¶ ControlInfo (Map): $controlInfo');
          }
        } else {
          // Objets typ√©s (RecolteContenant, ScoopContenant, etc.)
          try {
            final contenantObj = contenant as dynamic;
            contenantId = contenantObj.id?.toString() ?? 'ID_OBJET_MANQUANT';
            final controlInfo = contenantObj.controlInfo;
            isControlled =
                controlInfo != null && controlInfo.isControlled == true;

            if (kDebugMode) {
              print('üì¶ ID (Objet): $contenantId');
              print(
                  'üì¶ ControlInfo (Objet): isControlled=${controlInfo?.isControlled}');
            }
          } catch (e) {
            if (kDebugMode) {
              print('‚ö†Ô∏è Erreur acc√®s objet: $e');
            }
          }
        }

        if (isControlled) {
          controlledCount++;
          if (kDebugMode) {
            print('‚úÖ CONTENANT $contenantId ‚Üí CONTR√îL√â');
          }
        } else {
          if (kDebugMode) {
            print('‚ùå CONTENANT $contenantId ‚Üí NON CONTR√îL√â');
          }
        }
      } catch (e) {
        if (kDebugMode) {
          print('‚ö†Ô∏è Erreur traitement contenant: $e');
        }
        // Si controlInfo n'existe pas, le contenant n'est pas contr√¥l√©
      }
    }

    final result = {
      'total': totalCount,
      'controlled': controlledCount,
      'uncontrolled': totalCount - controlledCount,
    };

    if (kDebugMode) {
      print('üéØ ===== R√âSULTAT FINAL =====');
      print('üéØ Total contenants: $totalCount');
      print('üéØ Contenants contr√¥l√©s: $controlledCount');
      print('üéØ Contenants non contr√¥l√©s: ${totalCount - controlledCount}');
      print('üéØ ========================');
    }

    return result;
  }

  /// NOUVELLE M√âTHODE OPTIMIS√âE: V√©rifie si un contenant est contr√¥l√© directement depuis les donn√©es de collecte
  bool isContainerControlledFromCollecteData(
      dynamic collecteData, String containerCode) {
    if (collecteData == null) return false;

    final contenants = collecteData.contenants;
    if (contenants == null) return false;

    if (kDebugMode) {
      print(
          'üîç Recherche du contenant $containerCode dans ${contenants.length} contenants');
    }

    // ‚úÖ CORRECTION: Chercher le contenant par son ID r√©el
    for (final contenant in contenants) {
      try {
        // Obtenir l'ID du contenant
        String contenantId = '';
        if (contenant is Map<String, dynamic>) {
          contenantId = contenant['id']?.toString() ?? '';
        } else {
          // Objet typ√© (RecolteContenant, ScoopContenant, IndividuelContenant)
          final contenantObj = contenant as dynamic;
          contenantId = contenantObj.id?.toString() ?? '';
        }

        if (kDebugMode) {
          print('üîç Comparaison: "$contenantId" vs "$containerCode"');
        }

        // Si c'est le bon contenant, v√©rifier son statut de contr√¥le
        if (contenantId == containerCode) {
          if (kDebugMode) {
            print('‚úÖ Contenant trouv√©: $containerCode');
          }

          // R√©cup√©rer le controlInfo
          dynamic controlInfo;
          if (contenant is Map<String, dynamic>) {
            controlInfo = contenant['controlInfo'];
          } else {
            final contenantObj = contenant as dynamic;
            controlInfo = contenantObj.controlInfo;
          }

          if (controlInfo != null) {
            bool isControlled = false;
            if (controlInfo is Map<String, dynamic>) {
              isControlled = controlInfo['isControlled'] == true;
            } else {
              isControlled = controlInfo.isControlled == true;
            }

            if (kDebugMode) {
              print('üéØ Contenant $containerCode ‚Üí Contr√¥l√©: $isControlled');
            }
            return isControlled;
          } else {
            if (kDebugMode) {
              print('‚ùå Contenant $containerCode ‚Üí Pas de controlInfo');
            }
            return false;
          }
        }
      } catch (e) {
        if (kDebugMode) {
          print('‚ö†Ô∏è Erreur traitement contenant: $e');
        }
        continue;
      }
    }

    if (kDebugMode) {
      print('‚ùå Contenant $containerCode non trouv√©');
    }
    return false;
  }

  /// NOUVELLE M√âTHODE OPTIMIS√âE: Obtient les informations de contr√¥le d'un contenant depuis les donn√©es de collecte
  ContainerControlInfo? getContainerControlInfoFromCollecteData(
      dynamic collecteData, String containerCode) {
    if (collecteData == null) return null;

    final contenants = collecteData.contenants;
    if (contenants == null) return null;

    // ‚úÖ CORRECTION: Chercher le contenant par son ID r√©el
    for (final contenant in contenants) {
      try {
        // Obtenir l'ID du contenant
        String contenantId = '';
        if (contenant is Map<String, dynamic>) {
          contenantId = contenant['id']?.toString() ?? '';
        } else {
          // Objet typ√© (RecolteContenant, ScoopContenant, IndividuelContenant)
          final contenantObj = contenant as dynamic;
          contenantId = contenantObj.id?.toString() ?? '';
        }

        // Si c'est le bon contenant, r√©cup√©rer son controlInfo
        if (contenantId == containerCode) {
          if (contenant is Map<String, dynamic>) {
            final controlInfoData =
                contenant['controlInfo'] as Map<String, dynamic>?;
            if (controlInfoData != null) {
              return ContainerControlInfo.fromMap(controlInfoData);
            }
          } else {
            final contenantObj = contenant as dynamic;
            return contenantObj.controlInfo as ContainerControlInfo?;
          }
          return null; // Contenant trouv√© mais pas de controlInfo
        }
      } catch (e) {
        continue;
      }
    }

    return null; // Contenant non trouv√©
  }

  /// R√©cup√®re tous les contr√¥les qualit√© pour une p√©riode donn√©e
  List<QualityControlData> getQualityControlsByDateRange(
    DateTime startDate,
    DateTime endDate,
  ) {
    // Cette m√©thode est maintenant asynchrone et utilise Firestore
    // Pour la compatibilit√© imm√©diate, on retourne le cache local
    return _qualityControlsCache.values
        .where((control) =>
            control.receptionDate
                .isAfter(startDate.subtract(const Duration(days: 1))) &&
            control.receptionDate
                .isBefore(endDate.add(const Duration(days: 1))))
        .toList()
      ..sort((a, b) => b.receptionDate.compareTo(a.receptionDate));
  }

  /// R√©cup√®re tous les contr√¥les qualit√© d'un producteur
  List<QualityControlData> getQualityControlsByProducer(String producer) {
    return _qualityControlsCache.values
        .where((control) =>
            control.producer.toLowerCase().contains(producer.toLowerCase()))
        .toList()
      ..sort((a, b) => b.receptionDate.compareTo(a.receptionDate));
  }

  /// R√©cup√®re les statistiques de conformit√©
  QualityStats getQualityStats({DateTime? startDate, DateTime? endDate}) {
    var controls = _qualityControlsCache.values.toList();

    if (startDate != null && endDate != null) {
      controls = controls
          .where((control) =>
              control.receptionDate
                  .isAfter(startDate.subtract(const Duration(days: 1))) &&
              control.receptionDate
                  .isBefore(endDate.add(const Duration(days: 1))))
          .toList();
    }

    final total = controls.length;
    final conforme = controls
        .where((c) => c.conformityStatus == ConformityStatus.conforme)
        .length;
    final nonConforme = total - conforme;

    final averageWaterContent = controls
            .where((c) => c.waterContent != null)
            .fold<double>(0, (sum, c) => sum + c.waterContent!) /
        controls.where((c) => c.waterContent != null).length;

    final totalHoneyWeight =
        controls.fold<double>(0, (sum, c) => sum + c.honeyWeight);

    return QualityStats(
      totalControls: total,
      conformeCount: conforme,
      nonConformeCount: nonConforme,
      conformityRate: total > 0 ? (conforme / total) * 100 : 0,
      averageWaterContent: averageWaterContent.isNaN ? 0 : averageWaterContent,
      totalHoneyWeight: totalHoneyWeight,
    );
  }

  /// Supprime un contr√¥le qualit√©
  Future<bool> deleteQualityControl(
      String containerCode, DateTime receptionDate) async {
    try {
      final key = '${containerCode}_${receptionDate.millisecondsSinceEpoch}';
      _qualityControlsCache.remove(key);

      await Future.delayed(const Duration(milliseconds: 200));

      if (kDebugMode) {
        print('üóëÔ∏è Contr√¥le qualit√© supprim√©: $key');
      }

      return true;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la suppression: $e');
      }
      return false;
    }
  }

  /// Exporte les donn√©es en JSON
  String exportToJson({DateTime? startDate, DateTime? endDate}) {
    var controls = _qualityControlsCache.values.toList();

    if (startDate != null && endDate != null) {
      controls = controls
          .where((control) =>
              control.receptionDate
                  .isAfter(startDate.subtract(const Duration(days: 1))) &&
              control.receptionDate
                  .isBefore(endDate.add(const Duration(days: 1))))
          .toList();
    }

    final data = {
      'export_date': DateTime.now().toIso8601String(),
      'total_controls': controls.length,
      'quality_controls': controls.map((c) => c.toJson()).toList(),
    };

    return jsonEncode(data);
  }

  /// V√©rifie si un contenant a d√©j√† √©t√© contr√¥l√© (v√©rification cache local uniquement)
  bool isContainerControlledInCache(
      String containerCode, DateTime receptionDate) {
    final key = '${containerCode}_${receptionDate.millisecondsSinceEpoch}';
    return _qualityControlsCache.containsKey(key);
  }

  /// R√©cup√®re les causes de non-conformit√© les plus fr√©quentes
  Map<String, int> getNonConformityCauses() {
    final causes = <String, int>{};

    for (final control in _qualityControlsCache.values) {
      if (control.conformityStatus == ConformityStatus.nonConforme &&
          control.nonConformityCause != null) {
        final cause = control.nonConformityCause!;
        causes[cause] = (causes[cause] ?? 0) + 1;
      }
    }

    // Trier par fr√©quence d√©croissante
    final sortedEntries = causes.entries.toList()
      ..sort((a, b) => b.value.compareTo(a.value));

    return Map.fromEntries(sortedEntries);
  }

  /// Supprime toutes les donn√©es de test fictives
  Future<void> clearTestData() async {
    try {
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';

      // Liste des codes de contenants fictifs √† supprimer
      final testContainerCodes = [
        'REF001',
        'IND002',
        'MIE003',
        'SCO004',
        'REF005',
        'IND006',
        'MIE007',
        'SCO008'
      ];

      final batch = _firestore.batch();
      int deleteCount = 0;

      for (final containerCode in testContainerCodes) {
        final querySnapshot = await _firestore
            .collection('controles_qualite')
            .doc(siteUtilisateur)
            .collection('controles')
            .where('containerCode', isEqualTo: containerCode)
            .get();

        for (final doc in querySnapshot.docs) {
          batch.delete(doc.reference);
          deleteCount++;
        }
      }

      if (deleteCount > 0) {
        await batch.commit();

        // Vider le cache
        _qualityControlsCache.clear();

        if (kDebugMode) {
          print('‚úÖ Supprim√© $deleteCount donn√©es de test fictives');
        }
      } else {
        if (kDebugMode) {
          print('‚ÑπÔ∏è Aucune donn√©e de test fictive trouv√©e √† supprimer');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la suppression des donn√©es de test: $e');
      }
      rethrow;
    }
  }

  /// R√©cup√®re tous les contr√¥les qualit√© depuis Firestore
  Future<List<QualityControlData>> getAllQualityControlsFromFirestore() async {
    try {
      // üöÄ LOGS DE TRA√áAGE SERVICE QUALIT√â
      debugPrint('üîç ===== SERVICE QUALIT√â APPEL√â POUR R√âCUP√âRATION =====');
      debugPrint('   üìÅ Service: QualityControlService');
      debugPrint('   üîß M√©thode: getAllQualityControlsFromFirestore()');
      debugPrint(
          '   üéØ Cette m√©thode fonctionne parfaitement pour l\'affichage');
      debugPrint(
          '   ‚úÖ CONFIRMATION: Elle est utilis√©e par le syst√®me d\'attribution');
      debugPrint('   üìÖ Timestamp: ${DateTime.now()}');
      debugPrint('==========================================================');

      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';
      debugPrint('üè≠ Site utilisateur: $siteUtilisateur');

      final querySnapshot = await _firestore
          .collection('controles_qualite')
          .doc(siteUtilisateur)
          .collection('controles')
          .orderBy('receptionDate', descending: true)
          .get();

      final controls = <QualityControlData>[];
      debugPrint(
          'üìä Traitement de ${querySnapshot.docs.length} documents trouv√©s...');

      for (int i = 0; i < querySnapshot.docs.length; i++) {
        final doc = querySnapshot.docs[i];
        final data = doc.data();

        debugPrint('   üìÑ Document ${i + 1}: ${doc.id}');
        debugPrint('   üì¶ ContainerCode: ${data['containerCode']}');

        final control = QualityControlData.fromFirestore(data,
            documentId: doc.id); // üÜï Passer le documentId r√©el
        controls.add(control);

        debugPrint(
            '   ‚úÖ Contr√¥le ajout√© avec documentId: ${control.documentId}');

        // Mettre en cache
        final key =
            '${control.containerCode}_${control.receptionDate.millisecondsSinceEpoch}';
        _qualityControlsCache[key] = control;
      }

      debugPrint('üéä ===== R√âSULTAT FINAL R√âCUP√âRATION =====');
      debugPrint(
          '   ‚úÖ SUCC√àS: ${controls.length} contr√¥les qualit√© r√©cup√©r√©s depuis Firestore');
      debugPrint('   üéØ Tous les contr√¥les ont leur documentId r√©el !');
      debugPrint(
          '   üìä Cette liste sera utilis√©e pour filtrer par containerCode');
      debugPrint('   üöÄ Exactement comme pour l\'affichage des produits !');
      debugPrint('=============================================');

      return controls;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la r√©cup√©ration Firestore: $e');
      }
      return [];
    }
  }

  /// M√©thodes priv√©es pour la gestion des streams
  void _notifyListeners() {
    // Notifier les changements dans les contr√¥les
    _controlsStreamController.add(Map.from(_qualityControlsCache));

    // Calculer et notifier les nouvelles statistiques
    final newStats = getQualityStats();
    _lastStats = newStats;
    _statsStreamController.add(newStats);
  }

  /// Met √† jour le champ de contr√¥le dans la collecte source
  Future<void> _updateCollecteControlStatus(
      QualityControlData controlData) async {
    try {
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';

      // Cr√©er l'information de contr√¥le √† ajouter
      final controlInfo = {
        'isControlled': true,
        'conformityStatus': controlData.conformityStatus.name,
        'controlDate': Timestamp.fromDate(controlData.createdAt),
        'controllerName': controlData.controllerName,
        'controlId':
            '${_cleanContainerCode(controlData.containerCode)}_${controlData.receptionDate.millisecondsSinceEpoch}',
      };

      if (kDebugMode) {
        print('üîÑ MISE √Ä JOUR COLLECTE - D√©but');
        print('üì¶ Contenant: ${controlData.containerCode}');
        print('üë• Producteur: ${controlData.producer}');
        print('üìÖ Date: ${controlData.receptionDate}');
      }

      // üÜï D√âTECTION BAS√âE SUR LA RECHERCHE EN BASE DE DONN√âES
      final String collectionType =
          await _detectCollectionTypeFromDatabase(controlData, siteUtilisateur);
      final CollecteUpdateResult updateResult =
          await _updateSpecificCollectionType(
        collectionType: collectionType,
        siteUtilisateur: siteUtilisateur,
        controlData: controlData,
        controlInfo: controlInfo,
      );

      if (!updateResult.success) {
        if (kDebugMode) {
          print('‚ö†Ô∏è D√©tection automatique √©chou√©e, essai de tous les types...');
        }
        final fallbackResult = await _updateAllCollectionTypes(
            siteUtilisateur, controlData, controlInfo);

        // Si trouv√© dans le fallback, mettre √† jour le contr√¥le avec l'ID de collecte
        if (fallbackResult.success && fallbackResult.collecteId != null) {
          await _updateQualityControlWithCollecteId(
              controlData, fallbackResult.collecteId!);
          // üîÑ FORCER LA MISE √Ä JOUR IMM√âDIATE DE L'INTERFACE
          _forceInterfaceUpdate(
              fallbackResult.collecteId!, controlData.containerCode);
        }
      } else if (updateResult.collecteId != null) {
        // Mettre √† jour le contr√¥le qualit√© avec l'ID de collecte trouv√©
        await _updateQualityControlWithCollecteId(
            controlData, updateResult.collecteId!);
        // üîÑ FORCER LA MISE √Ä JOUR IMM√âDIATE DE L'INTERFACE
        _forceInterfaceUpdate(
            updateResult.collecteId!, controlData.containerCode);
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la mise √† jour de la collecte: $e');
      }
    }
  }

  /// D√©tecte le type de collecte en recherchant R√âELLEMENT dans la base de donn√©es
  Future<String> _detectCollectionTypeFromDatabase(
      QualityControlData controlData, String siteUtilisateur) async {
    final containerCode = controlData.containerCode;

    if (kDebugMode) {
      print('üîç ===== D√âTECTION TYPE PAR ID CONTENANT =====');
      print('üîç Producteur/Collecteur: "${controlData.producer}"');
      print('üîç Contenant: $containerCode');
      print('üîç Date: ${controlData.receptionDate}');
      print('üîç Site: $siteUtilisateur');
      print('üîç ==========================================');
    }

    // üÜï NOUVEAU SYST√àME: D√©tection par suffixe de l'ID
    if (containerCode.contains('_')) {
      final parts = containerCode.split('_');
      if (parts.length >= 2) {
        final suffix = parts[1].toLowerCase();

        if (kDebugMode) {
          print('üîç üéØ SUFFIXE D√âTECT√â: "$suffix"');
        }

        switch (suffix) {
          case 'recolte':
          case 'recoltes':
            if (kDebugMode) print('üîç ‚úÖ TYPE: R√âCOLTES (par suffixe)');
            return 'recoltes';
          case 'scoop':
            if (kDebugMode) print('üîç ‚úÖ TYPE: SCOOP (par suffixe)');
            return 'scoop';
          case 'individuel':
          case 'individuels':
            if (kDebugMode) print('üîç ‚úÖ TYPE: INDIVIDUELS (par suffixe)');
            return 'individuels';
          default:
            if (kDebugMode) print('üîç ‚ö†Ô∏è Suffixe "$suffix" non reconnu');
        }
      }
    }

    // üîÑ FALLBACK: Recherche en base de donn√©es (ancien syst√®me)
    if (kDebugMode) {
      print('üîç ‚ö†Ô∏è Pas de suffixe reconnu, recherche en BDD...');
    }

    // P√©riode de recherche √©largie (7 jours)
    final searchDate = controlData.receptionDate;
    final startDate =
        DateTime(searchDate.year, searchDate.month, searchDate.day)
            .subtract(const Duration(days: 3));
    final endDate = DateTime(searchDate.year, searchDate.month, searchDate.day)
        .add(const Duration(days: 4));

    if (kDebugMode) {
      print(
          'üîç P√©riode de recherche: ${startDate.toLocal()} ‚Üí ${endDate.toLocal()}');
    }

    // √âTAPE 1: Rechercher dans R√âCOLTES
    try {
      if (kDebugMode) print('üîç 1Ô∏è‚É£ RECHERCHE DANS R√âCOLTES...');

      final recolteSnapshot = await FirebaseFirestore.instance
          .collection('Sites')
          .doc(siteUtilisateur)
          .collection('nos_collectes_recoltes')
          .where('created_at',
              isGreaterThanOrEqualTo: Timestamp.fromDate(startDate))
          .where('created_at', isLessThanOrEqualTo: Timestamp.fromDate(endDate))
          .get();

      for (final doc in recolteSnapshot.docs) {
        final data = doc.data();
        final List<dynamic> contenants = data['contenants'] ?? [];

        for (int i = 0; i < contenants.length; i++) {
          // V√©rifier les deux formats: nouveau (avec suffixe) et ancien (sans suffixe)
          final containerIdOld = 'C${(i + 1).toString().padLeft(3, '0')}';
          final containerIdNew =
              'C${(i + 1).toString().padLeft(3, '0')}_recolte';

          if (containerCode == containerIdOld ||
              containerCode == containerIdNew) {
            if (kDebugMode) {
              print('üîç ‚úÖ TROUV√â DANS R√âCOLTES: ${doc.id}');
              print('üîç    Contenant: $containerCode (index $i)');
            }
            return 'recoltes';
          }
        }
      }
      if (kDebugMode) print('üîç ‚ùå Pas trouv√© dans r√©coltes');
    } catch (e) {
      if (kDebugMode) print('üîç ‚ùå Erreur recherche r√©coltes: $e');
    }

    // √âTAPE 2: Rechercher dans SCOOP
    try {
      if (kDebugMode) print('üîç 2Ô∏è‚É£ RECHERCHE DANS SCOOP...');

      final scoopSnapshot = await FirebaseFirestore.instance
          .collection('Sites')
          .doc(siteUtilisateur)
          .collection('nos_achats_scoop_contenants')
          .where('created_at',
              isGreaterThanOrEqualTo: Timestamp.fromDate(startDate))
          .where('created_at', isLessThanOrEqualTo: Timestamp.fromDate(endDate))
          .get();

      for (final doc in scoopSnapshot.docs) {
        final data = doc.data();
        final List<dynamic> contenants = data['contenants'] ?? [];

        for (int i = 0; i < contenants.length; i++) {
          // V√©rifier les deux formats: nouveau (avec suffixe) et ancien (sans suffixe)
          final containerIdOld = 'C${(i + 1).toString().padLeft(3, '0')}';
          final containerIdNew = 'C${(i + 1).toString().padLeft(3, '0')}_scoop';

          if (containerCode == containerIdOld ||
              containerCode == containerIdNew) {
            if (kDebugMode) {
              print('üîç ‚úÖ TROUV√â DANS SCOOP: ${doc.id}');
              print('üîç    SCOOP: ${data['scoop_nom'] ?? 'N/A'}');
              print('üîç    Collecteur: ${data['collecteur_nom'] ?? 'N/A'}');
              print('üîç    Contenant: $containerCode (index $i)');
            }
            return 'scoop';
          }
        }
      }
      if (kDebugMode) print('üîç ‚ùå Pas trouv√© dans SCOOP');
    } catch (e) {
      if (kDebugMode) print('üîç ‚ùå Erreur recherche SCOOP: $e');
    }

    // √âTAPE 3: Rechercher dans INDIVIDUELS
    try {
      if (kDebugMode) print('üîç 3Ô∏è‚É£ RECHERCHE DANS INDIVIDUELS...');

      final individuelSnapshot = await FirebaseFirestore.instance
          .collection('Sites')
          .doc(siteUtilisateur)
          .collection('nos_achats_individuels')
          .where('created_at',
              isGreaterThanOrEqualTo: Timestamp.fromDate(startDate))
          .where('created_at', isLessThanOrEqualTo: Timestamp.fromDate(endDate))
          .get();

      for (final doc in individuelSnapshot.docs) {
        final data = doc.data();
        final List<dynamic> contenants = data['contenants'] ?? [];

        for (int i = 0; i < contenants.length; i++) {
          // V√©rifier les deux formats: nouveau (avec suffixe) et ancien (sans suffixe)
          final containerIdOld = 'C${(i + 1).toString().padLeft(3, '0')}';
          final containerIdNew =
              'C${(i + 1).toString().padLeft(3, '0')}_individuel';

          if (containerCode == containerIdOld ||
              containerCode == containerIdNew) {
            if (kDebugMode) {
              print('üîç ‚úÖ TROUV√â DANS INDIVIDUELS: ${doc.id}');
              print('üîç    Producteur: ${data['producteur_nom'] ?? 'N/A'}');
              print('üîç    Contenant: $containerCode (index $i)');
            }
            return 'individuels';
          }
        }
      }
      if (kDebugMode) print('üîç ‚ùå Pas trouv√© dans individuels');
    } catch (e) {
      if (kDebugMode) print('üîç ‚ùå Erreur recherche individuels: $e');
    }

    // FALLBACK: Si rien trouv√©, utiliser l'ancienne m√©thode
    if (kDebugMode) {
      print('üîç ‚ö†Ô∏è AUCUNE CORRESPONDANCE TROUV√âE EN BDD');
      print('üîç üîÑ Fallback vers d√©tection par nom...');
    }

    return _detectCollectionTypeImproved(controlData);
  }

  /// D√©tecte le type de collecte bas√© sur toutes les donn√©es disponibles (ULTRA-FIABLE)
  String _detectCollectionTypeImproved(QualityControlData controlData) {
    final producer = controlData.producer;
    final apiaryVillage = controlData.apiaryVillage;
    final containerCode = controlData.containerCode;
    final floralPredominance = controlData.floralPredominance;
    final quality = controlData.quality;

    if (kDebugMode) {
      print('üîç ===== D√âTECTION TYPE COLLECTE ULTRA-FIABLE =====');
      print('üîç Producteur/Collecteur: "$producer"');
      print('üîç Village rucher: "$apiaryVillage"');
      print('üîç Code contenant: "$containerCode"');
      print('üîç Pr√©dominance florale: "$floralPredominance"');
      print('üîç Qualit√©: "$quality"');
      print('üîç Date r√©ception: ${controlData.receptionDate}');
      print('üîç ================================================');
    }

    final producerLower = producer.toLowerCase();
    final apiaryVillageLower = apiaryVillage.toLowerCase();
    final floralLower = floralPredominance.toLowerCase();
    final qualityLower = quality.toLowerCase();

    int scoopScore = 0;
    int recolteScore = 0;
    int individuelScore = 0;

    // === SYST√àME DE SCORING MULTI-CRIT√àRES ===

    // 1. ANALYSE DU PRODUCTEUR/COLLECTEUR
    if (kDebugMode) print('üîç 1Ô∏è‚É£ ANALYSE DU PRODUCTEUR...');

    // Indicateurs SCOOP forts
    final scoopKeywords = [
      'scoop',
      'coop√©rative',
      'cooperative',
      'coop',
      'groupement',
      'union',
      'doup',
      'kabore',
      'maham',
      'pr√©sident',
      'rucher',
      'soci√©t√©',
      'association'
    ];

    for (final keyword in scoopKeywords) {
      if (producerLower.contains(keyword)) {
        scoopScore += 10;
        if (kDebugMode)
          print('üîç   ‚úÖ SCOOP: "$keyword" trouv√© (+10) ‚Üí Score: $scoopScore');
      }
    }

    // Indicateurs INDIVIDUELS forts
    final individuelKeywords = [
      'miellerie',
      'mielleur',
      'producteur individuel',
      'individuel',
      'entreprise'
    ];

    for (final keyword in individuelKeywords) {
      if (producerLower.contains(keyword)) {
        individuelScore += 10;
        if (kDebugMode)
          print(
              'üîç   ‚úÖ INDIVIDUEL: "$keyword" trouv√© (+10) ‚Üí Score: $individuelScore');
      }
    }

    // Indicateurs R√âCOLTES (noms propres d'apiculteurs)
    if (producerLower.contains(' ') && producerLower.split(' ').length >= 2) {
      // Pattern nom + pr√©nom typique d'apiculteurs
      final words = producerLower.split(' ');
      bool hasTypicalName = false;

      // Noms/pr√©noms burkinab√© typiques
      final burkinabeNames = [
        'abdoulaye',
        'aminata',
        'boureima',
        'mariam',
        'ibrahim',
        'fatimata',
        'seydou',
        'aicha',
        'ousmane',
        'kadiatou',
        'moussa',
        'fatoumata',
        'cl√©ment',
        'yameogo',
        'ou√©draogo',
        'kabor√©',
        'sawadogo',
        'compaor√©',
        'diallo',
        'sankara',
        'zongo',
        'traor√©'
      ];

      for (final word in words) {
        if (burkinabeNames
            .any((name) => word.contains(name) || name.contains(word))) {
          hasTypicalName = true;
          break;
        }
      }

      if (hasTypicalName || words.length >= 3) {
        recolteScore += 8;
        if (kDebugMode)
          print(
              'üîç   ‚úÖ R√âCOLTE: Nom propre d\'apiculteur d√©tect√© (+8) ‚Üí Score: $recolteScore');
      }
    }

    // 2. ANALYSE DU VILLAGE/LOCALISATION
    if (kDebugMode) print('üîç 2Ô∏è‚É£ ANALYSE DU VILLAGE...');

    // Villages/zones associ√©s aux SCOOP
    final scoopZones = ['dassa', 'sanguie', 'centre-ouest', 'rucher', 'zone'];
    for (final zone in scoopZones) {
      if (apiaryVillageLower.contains(zone)) {
        scoopScore += 3;
        if (kDebugMode)
          print(
              'üîç   ‚úÖ SCOOP: Zone "$zone" d√©tect√©e (+3) ‚Üí Score: $scoopScore');
      }
    }

    // 3. ANALYSE DE LA QUALIT√â/PR√âDOMINANCE
    if (kDebugMode) print('üîç 3Ô∏è‚É£ ANALYSE QUALIT√â & FLORALE...');

    // Qualit√©s typiques des SCOOP (production organis√©e)
    final scoopQualities = ['excellent', 'tr√®s bon', 'standardis√©', 'certifi√©'];
    for (final qual in scoopQualities) {
      if (qualityLower.contains(qual)) {
        scoopScore += 2;
        if (kDebugMode)
          print('üîç   ‚úÖ SCOOP: Qualit√© "$qual" (+2) ‚Üí Score: $scoopScore');
      }
    }

    // Pr√©dominances typiques des r√©coltes individuelles
    final recolteFlowers = ['karit√©', 'n√©r√©', 'acacia', 'moringa'];
    for (final flower in recolteFlowers) {
      if (floralLower.contains(flower)) {
        recolteScore += 2;
        if (kDebugMode)
          print(
              'üîç   ‚úÖ R√âCOLTE: Florale "$flower" (+2) ‚Üí Score: $recolteScore');
      }
    }

    // 4. ANALYSE TEMPORELLE (heure de contr√¥le)
    if (kDebugMode) print('üîç 4Ô∏è‚É£ ANALYSE TEMPORELLE...');

    final hour = controlData.receptionDate.hour;
    if (hour >= 8 && hour <= 16) {
      // Heures de travail ‚Üí plus probable pour SCOOP (collecte organis√©e)
      scoopScore += 1;
      if (kDebugMode)
        print(
            'üîç   ‚úÖ SCOOP: Heure professionnelle ($hour h) (+1) ‚Üí Score: $scoopScore');
    } else {
      // Hors heures ‚Üí plus probable pour r√©colte individuelle
      recolteScore += 1;
      if (kDebugMode)
        print(
            'üîç   ‚úÖ R√âCOLTE: Heure individuelle ($hour h) (+1) ‚Üí Score: $recolteScore');
    }

    // === D√âCISION FINALE BAS√âE SUR LES SCORES ===
    if (kDebugMode) {
      print('üîç ===== SCORES FINAUX =====');
      print('üîç ü•Ñ SCOOP: $scoopScore points');
      print('üîç üè≠ R√âCOLTE: $recolteScore points');
      print('üîç üë§ INDIVIDUEL: $individuelScore points');
      print('üîç ==========================');
    }

    // Seuil minimum pour une d√©cision fiable
    final maxScore = [scoopScore, recolteScore, individuelScore]
        .reduce((a, b) => a > b ? a : b);

    if (maxScore >= 5) {
      // Seuil de confiance
      if (scoopScore == maxScore) {
        if (kDebugMode)
          print('üîç üéØ D√âCISION: SCOOP (score: $scoopScore - confiance haute)');
        return 'scoop';
      } else if (individuelScore == maxScore) {
        if (kDebugMode)
          print(
              'üîç üéØ D√âCISION: INDIVIDUELS (score: $individuelScore - confiance haute)');
        return 'individuels';
      } else {
        if (kDebugMode)
          print(
              'üîç üéØ D√âCISION: R√âCOLTES (score: $recolteScore - confiance haute)');
        return 'recoltes';
      }
    }

    // Si scores faibles, utiliser logique contextuelle simple
    if (kDebugMode) {
      print('üîç ‚ö†Ô∏è Scores faibles, analyse contextuelle simple...');
    }

    // Si le nom ressemble √† un nom propre, c'est probablement une r√©colte
    if (producerLower.contains(' ') && producerLower.split(' ').length >= 2) {
      if (kDebugMode) {
        print('üîç üéØ D√âCISION: R√âCOLTES (nom propre - confiance moyenne)');
      }
      return 'recoltes';
    }

    // Fallback vers m√©thode originale
    if (kDebugMode) {
      print('üîç ‚ö†Ô∏è FALLBACK vers m√©thode simple...');
    }
    return _detectCollectionType(producer);
  }

  /// D√©tecte le type de collecte bas√© sur le producteur (M√âTHODE ORIGINALE)
  String _detectCollectionType(String producer) {
    final producerLower = producer.toLowerCase();

    if (kDebugMode) {
      print('üîç === D√âTECTION TYPE COLLECTE ===');
      print('üîç Producteur/Collecteur: "$producer"');
      print('üîç Producteur lowercase: "$producerLower"');
    }

    // 1. V√©rification SCOOP (recherche √©largie)
    if (producerLower.contains('scoop') ||
        producerLower.contains('coop√©rative') ||
        producerLower.contains('cooperative') ||
        producerLower.contains('coop') ||
        producerLower.contains('groupement') ||
        producerLower.contains('union') ||
        producerLower.contains('doup') || // Nom fr√©quent dans les SCOOPs
        producerLower.contains('kabore') || // Pr√©sident fr√©quent
        producerLower.contains('maham')) {
      // Nom SCOOP fr√©quent
      if (kDebugMode) print('üìç ‚úÖ Type d√©tect√©: SCOOP (mots-cl√©s trouv√©s)');
      return 'scoop';
    }

    // 2. V√©rification INDIVIDUELS
    if (producerLower.contains('miellerie') ||
        producerLower.contains('mielleur') ||
        producerLower.contains('producteur individuel') ||
        producerLower.contains('individuel')) {
      if (kDebugMode) print('üìç ‚úÖ Type d√©tect√©: INDIVIDUELS');
      return 'individuels';
    }

    // 3. Par d√©faut: R√âCOLTES (plus fr√©quent que SCOOP dans la plupart des cas)
    // Si aucun mot-cl√© sp√©cifique, c'est probablement une r√©colte d'apiculteur
    if (kDebugMode) {
      print('üìç ‚ö†Ô∏è Aucun mot-cl√© sp√©cifique trouv√©');
      print(
          'üìç üè≠ Type d√©tect√©: R√âCOLTES (d√©faut - producteur individuel probable)');
    }
    return 'recoltes'; // Retour au d√©faut R√âCOLTES
  }

  /// Met √† jour un type sp√©cifique de collecte
  Future<CollecteUpdateResult> _updateSpecificCollectionType({
    required String collectionType,
    required String siteUtilisateur,
    required QualityControlData controlData,
    required Map<String, dynamic> controlInfo,
  }) async {
    try {
      final Map<String, dynamic> collectionConfig =
          _getCollectionConfig(collectionType, siteUtilisateur);

      if (kDebugMode) {
        print('üéØ Mise √† jour type: $collectionType');
        print('üìÅ Chemin: ${collectionConfig['path']}');
      }

      // Chercher dans une plage de dates plus large (7 derniers jours)
      final dateRecherche = controlData.receptionDate;
      final dateDebut = DateTime(
        dateRecherche.year,
        dateRecherche.month,
        dateRecherche.day - 7, // 7 jours avant
      );
      final dateFin = DateTime(
        dateRecherche.year,
        dateRecherche.month,
        dateRecherche.day + 1, // Jour suivant
      );

      if (kDebugMode) {
        print('üîç Recherche √©largie:');
        print('üîç   Date contr√¥le: $dateRecherche');
        print('üîç   P√©riode recherche: $dateDebut ‚Üí $dateFin');
      }

      final querySnapshot = await _firestore
          .collection(collectionConfig['collection1'])
          .doc(collectionConfig['doc'])
          .collection(collectionConfig['collection2'])
          .where(collectionConfig['dateField'],
              isGreaterThanOrEqualTo: Timestamp.fromDate(dateDebut))
          .where(collectionConfig['dateField'],
              isLessThan: Timestamp.fromDate(dateFin))
          .get();

      if (kDebugMode) {
        print('üìä Nombre de documents trouv√©s: ${querySnapshot.docs.length}');
      }

      if (kDebugMode && querySnapshot.docs.isNotEmpty) {
        print('üìã Documents trouv√©s dans la p√©riode:');
        for (final doc in querySnapshot.docs) {
          final data = doc.data();
          final docDate = data[collectionConfig['dateField']];
          print('üìã   - ${doc.id}: date = $docDate');
        }
      }

      for (final doc in querySnapshot.docs) {
        final bool updated = await _updateContainerInDocument(
          doc: doc,
          controlData: controlData,
          controlInfo: controlInfo,
          collectionType: collectionType,
        );

        if (updated) {
          if (kDebugMode) {
            print('üéâ SUCC√àS MISE √Ä JOUR dans ${doc.id}');
          }
          return CollecteUpdateResult.success(
            collecteId: doc.id,
            collectionPath: collectionConfig['path'],
          );
        }
      }

      return CollecteUpdateResult.failure();
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur pour type $collectionType: $e');
      }
      return CollecteUpdateResult.failure();
    }
  }

  /// Configure les chemins pour chaque type de collecte
  Map<String, dynamic> _getCollectionConfig(String type, String site) {
    switch (type) {
      case 'recoltes':
        return {
          'collection1': 'Sites',
          'doc': site,
          'collection2': 'nos_collectes_recoltes',
          'dateField': 'createdAt',
          'path': 'Sites/$site/nos_collectes_recoltes'
        };
      case 'scoop':
        return {
          'collection1': 'Sites',
          'doc': site,
          'collection2': 'nos_achats_scoop_contenants',
          'dateField': 'created_at',
          'path': 'Sites/$site/nos_achats_scoop_contenants'
        };
      case 'individuels':
        return {
          'collection1': 'Sites',
          'doc': site,
          'collection2': 'nos_achats_individuels',
          'dateField': 'created_at',
          'path': 'Sites/$site/nos_achats_individuels'
        };
      default:
        return _getCollectionConfig('recoltes', site);
    }
  }

  /// Met √† jour le contenant dans un document sp√©cifique
  Future<bool> _updateContainerInDocument({
    required QueryDocumentSnapshot doc,
    required QualityControlData controlData,
    required Map<String, dynamic> controlInfo,
    required String collectionType,
  }) async {
    try {
      final data = doc.data() as Map<String, dynamic>;
      final contenants = data['contenants'] as List<dynamic>?;

      if (contenants == null) {
        if (kDebugMode) {
          print('‚ö†Ô∏è Aucun contenant dans le document ${doc.id}');
        }
        return false;
      }

      if (kDebugMode) {
        print(
            'üîç Recherche dans document ${doc.id} (${contenants.length} contenants)');
        print('üîç Cherche contenant: ${controlData.containerCode}');
        print('üîç Producteur contr√¥le: ${controlData.producer}');
      }

      for (int i = 0; i < contenants.length; i++) {
        final contenant = contenants[i] as Map<String, dynamic>;

        // üÜï RECHERCHE PAR ID R√âEL STOCK√â EN BASE (pas par index)
        final contenantId = contenant['id']?.toString() ??
            'C${(i + 1).toString().padLeft(3, '0')}'; // Fallback pour anciens contenants

        if (kDebugMode) {
          print('üîç   Contenant ${i + 1}: ID = $contenantId');
        }

        if (contenantId == controlData.containerCode) {
          if (kDebugMode) {
            print('‚úÖ MATCH TROUV√â - Contenant $contenantId correspond !');
          }
          contenants[i]['controlInfo'] = controlInfo;

          await doc.reference.update({
            'contenants': contenants,
            'derniereMiseAJour': FieldValue.serverTimestamp(),
          });

          if (kDebugMode) {
            print('‚úÖ SUCC√àS - Collecte mise √† jour !');
            print('üìÑ Document: ${doc.id}');
            print('üì¶ Contenant: $contenantId (index $i)');
            print('üè∑Ô∏è Type: $collectionType');
            print('üìÅ Chemin: ${doc.reference.path}');
          }

          return true;
        }
      }

      if (kDebugMode) {
        print(
            '‚ö†Ô∏è Contenant ${controlData.containerCode} non trouv√© dans ${doc.id}');
      }

      return false;
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur mise √† jour document ${doc.id}: $e');
      }
      return false;
    }
  }

  /// Fallback: essaie tous les types de collecte (ordre de priorit√© logique)
  Future<CollecteUpdateResult> _updateAllCollectionTypes(
    String siteUtilisateur,
    QualityControlData controlData,
    Map<String, dynamic> controlInfo,
  ) async {
    // Ordre de priorit√©: r√©coltes (plus fr√©quent), puis SCOOP, puis individuels
    final types = ['recoltes', 'scoop', 'individuels'];

    if (kDebugMode) {
      print('üîÑ FALLBACK: Essai de tous les types...');
    }

    for (final type in types) {
      if (kDebugMode) {
        print('üîç Essai du type: $type');
      }

      final result = await _updateSpecificCollectionType(
        collectionType: type,
        siteUtilisateur: siteUtilisateur,
        controlData: controlData,
        controlInfo: controlInfo,
      );

      if (result.success) {
        if (kDebugMode) {
          print('‚úÖ FALLBACK R√âUSSI avec type: $type');
        }
        return result;
      }
    }

    if (kDebugMode) {
      print(
          '‚ùå √âCHEC TOTAL - Aucune collecte trouv√©e pour ${controlData.containerCode}');
      print('üìÖ Date recherch√©e: ${controlData.receptionDate}');
      print('üè¢ Site: $siteUtilisateur');
    }

    return CollecteUpdateResult.failure();
  }

  /// Met √† jour le contr√¥le qualit√© avec l'ID de collecte d'origine
  Future<void> _updateQualityControlWithCollecteId(
    QualityControlData controlData,
    String collecteId,
  ) async {
    try {
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';
      final docId =
          '${_cleanContainerCode(controlData.containerCode)}_${controlData.receptionDate.millisecondsSinceEpoch}';

      await _firestore
          .collection('controles_qualite')
          .doc(siteUtilisateur)
          .collection('controles')
          .doc(docId)
          .update({
        'collecteId': collecteId,
        'derniereMiseAJour': FieldValue.serverTimestamp(),
      });

      if (kDebugMode) {
        print('‚úÖ Contr√¥le qualit√© mis √† jour avec collecteId: $collecteId');
        print('üì¶ Contenant: ${controlData.containerCode}');
        print('üîó Lien √©tabli avec la collecte d\'origine');
      }

      // Invalider le cache pour cette collecte
      invalidateCollecteCache(collecteId);
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors de la mise √† jour du collecteId: $e');
      }
    }
  }

  /// R√©cup√®re tous les contr√¥les qualit√© pour une collecte sp√©cifique
  Future<List<QualityControlData>> getQualityControlsForCollecte(
      String collecteId) async {
    try {
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';

      final querySnapshot = await _firestore
          .collection('controles_qualite')
          .doc(siteUtilisateur)
          .collection('controles')
          .where('collecteId', isEqualTo: collecteId)
          .get();

      final controls = <QualityControlData>[];
      for (final doc in querySnapshot.docs) {
        final data = doc.data();
        final control = QualityControlData.fromFirestore(data);
        controls.add(control);
      }

      if (kDebugMode) {
        print(
            'üìä R√©cup√©r√© ${controls.length} contr√¥les pour collecte $collecteId');
      }

      return controls;
    } catch (e) {
      if (kDebugMode) {
        print(
            '‚ùå Erreur lors de la r√©cup√©ration des contr√¥les pour collecte $collecteId: $e');
      }
      return [];
    }
  }

  /// Met √† jour les champs d'attribution d'un contr√¥le qualit√©
  Future<void> updateQualityControlAttribution(
    String containerCode,
    DateTime receptionDate,
    String attributionId,
    String typeAttribution,
    DateTime dateAttribution,
  ) async {
    try {
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';
      final docId =
          '${_cleanContainerCode(containerCode)}_${receptionDate.millisecondsSinceEpoch}';

      debugPrint('üîÑ ===== D√âBUT MISE √Ä JOUR CONTR√îLE QUALIT√â =====');
      debugPrint('   üì¶ Container Code: $containerCode');
      debugPrint(
          '   üì¶ Container Code nettoy√©: ${_cleanContainerCode(containerCode)}');
      debugPrint('   üìÖ Reception Date: $receptionDate');
      debugPrint(
          '   üìÖ Reception Date milliseconds: ${receptionDate.millisecondsSinceEpoch}');
      debugPrint('   üÜî Doc ID: $docId');
      debugPrint('   üè≠ Site Utilisateur: $siteUtilisateur');
      debugPrint('   üéØ Attribution ID: $attributionId');
      debugPrint('   üè≠ Type Attribution: $typeAttribution');
      debugPrint('   üìÖ Date Attribution: $dateAttribution');

      final docPath = 'controles_qualite/$siteUtilisateur/controles/$docId';
      debugPrint('   üìÇ Document Path: $docPath');

      // V√©rifier si le document existe avant de le mettre √† jour
      final docRef = _firestore
          .collection('controles_qualite')
          .doc(siteUtilisateur)
          .collection('controles')
          .doc(docId);

      final docSnapshot = await docRef.get();
      debugPrint('   üìÑ Document existe: ${docSnapshot.exists}');

      if (!docSnapshot.exists) {
        debugPrint('   ‚ùå ERREUR: Document n\'existe pas! Chemin: $docPath');
        throw Exception('Document de contr√¥le qualit√© non trouv√©: $docPath');
      }

      final updateData = {
        'estAttribue': true,
        'attributionId': attributionId,
        'typeAttribution': typeAttribution,
        'dateAttribution': Timestamp.fromDate(dateAttribution),
        'derniereMiseAJour': FieldValue.serverTimestamp(),
      };

      debugPrint('   üìù Donn√©es de mise √† jour: $updateData');
      debugPrint('   üöÄ Lancement de la mise √† jour Firestore...');

      await docRef.update(updateData);

      debugPrint('   ‚úÖ Mise √† jour Firestore R√âUSSIE');

      // Mettre √† jour le cache local si disponible
      if (_qualityControlsCache.containsKey(docId)) {
        debugPrint('   üîÑ Mise √† jour du cache local...');
        final cachedControl = _qualityControlsCache[docId]!;
        _qualityControlsCache[docId] = cachedControl.copyWith(
          estAttribue: true,
          attributionId: attributionId,
          typeAttribution: typeAttribution,
          dateAttribution: dateAttribution,
        );
        debugPrint('   ‚úÖ Cache local mis √† jour');
      } else {
        debugPrint('   ‚ö†Ô∏è Pas de cache local pour ce document');
      }

      debugPrint('‚úÖ ===== CONTR√îLE QUALIT√â ATTRIBU√â AVEC SUCC√àS =====');
      debugPrint('   üì¶ Container: $containerCode');
      debugPrint('   üÜî Attribution: $attributionId');
      debugPrint('   üè≠ Type: $typeAttribution');
    } catch (e, stackTrace) {
      debugPrint('‚ùå ===== ERREUR MISE √Ä JOUR CONTR√îLE QUALIT√â =====');
      debugPrint('   üì¶ Container: $containerCode');
      debugPrint('   ‚ùå Erreur: $e');
      debugPrint('   ‚ùå Stack trace: $stackTrace');
      rethrow;
    }
  }

  /// üÜï VERSION CORRIG√âE : Met √† jour l'attribution avec le controlId existant
  Future<void> updateQualityControlAttributionByControlId(
    String controlId,
    String attributionId,
    String typeAttribution,
    DateTime dateAttribution,
  ) async {
    try {
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';

      debugPrint('üîÑ ===== D√âBUT MISE √Ä JOUR CONTR√îLE (PAR CONTROL ID) =====');
      debugPrint('   üÜî Control ID: $controlId');
      debugPrint('   üè≠ Site Utilisateur: $siteUtilisateur');
      debugPrint('   üéØ Attribution ID: $attributionId');
      debugPrint('   üè≠ Type Attribution: $typeAttribution');
      debugPrint('   üìÖ Date Attribution: $dateAttribution');

      final docPath = 'controles_qualite/$siteUtilisateur/controles/$controlId';
      debugPrint('   üìÇ Document Path: $docPath');

      // R√©f√©rence directe au document avec le controlId
      final docRef = _firestore
          .collection('controles_qualite')
          .doc(siteUtilisateur)
          .collection('controles')
          .doc(controlId);

      final docSnapshot = await docRef.get();
      debugPrint('   üìÑ Document existe: ${docSnapshot.exists}');

      if (!docSnapshot.exists) {
        debugPrint('   ‚ùå ERREUR: Document n\'existe pas! Chemin: $docPath');
        throw Exception('Document de contr√¥le qualit√© non trouv√©: $docPath');
      }

      final updateData = {
        'estAttribue': true,
        'attributionId': attributionId,
        'typeAttribution': typeAttribution,
        'dateAttribution': Timestamp.fromDate(dateAttribution),
        'derniereMiseAJour': FieldValue.serverTimestamp(),
      };

      debugPrint('   üìù Donn√©es de mise √† jour: $updateData');
      debugPrint('   üöÄ Lancement de la mise √† jour Firestore...');

      await docRef.update(updateData);

      debugPrint('   ‚úÖ Mise √† jour Firestore R√âUSSIE');

      // Mettre √† jour le cache local si disponible
      if (_qualityControlsCache.containsKey(controlId)) {
        debugPrint('   üîÑ Mise √† jour du cache local...');
        final cachedControl = _qualityControlsCache[controlId]!;
        _qualityControlsCache[controlId] = cachedControl.copyWith(
          estAttribue: true,
          attributionId: attributionId,
          typeAttribution: typeAttribution,
          dateAttribution: dateAttribution,
        );
        debugPrint('   ‚úÖ Cache local mis √† jour');
      } else {
        debugPrint('   ‚ö†Ô∏è Pas de cache local pour ce document');
      }

      debugPrint(
          '‚úÖ ===== CONTR√îLE QUALIT√â ATTRIBU√â AVEC SUCC√àS (CONTROL ID) =====');
      debugPrint('   üÜî Control ID: $controlId');
      debugPrint('   üéØ Attribution: $attributionId');
      debugPrint('   üè≠ Type: $typeAttribution');
    } catch (e, stackTrace) {
      debugPrint(
          '‚ùå ===== ERREUR MISE √Ä JOUR CONTR√îLE QUALIT√â (CONTROL ID) =====');
      debugPrint('   üÜî Control ID: $controlId');
      debugPrint('   ‚ùå Erreur: $e');
      debugPrint('   ‚ùå Stack trace: $stackTrace');
      rethrow;
    }
  }

  /// R√©cup√®re l'√©tat de contr√¥le optimis√© pour une collecte avec cache
  Future<Map<String, dynamic>> getOptimizedControlStatusForCollecte(
      String collecteId) async {
    try {
      // V√©rifier le cache (valide pendant 5 minutes)
      final cacheKey = collecteId;
      final cachedTimestamp = _cacheTimestamps[cacheKey];
      final now = DateTime.now();

      if (cachedTimestamp != null &&
          now.difference(cachedTimestamp).inMinutes < 5 &&
          _collecteControlStatsCache.containsKey(cacheKey)) {
        if (kDebugMode) {
          print('üì¶ Cache hit pour collecte $collecteId');
        }
        return _collecteControlStatsCache[cacheKey]!;
      }

      // Cache manqu√© ou expir√©, charger depuis Firestore
      if (kDebugMode) {
        print(
            'üîÑ Cache miss pour collecte $collecteId, chargement depuis Firestore');
      }

      final controls = await getQualityControlsForCollecte(collecteId);

      final Map<String, QualityControlData> controlsByContainer = {};
      for (final control in controls) {
        controlsByContainer[control.containerCode] = control;
      }

      final stats = {
        'totalControls': controls.length,
        'controlsByContainer': controlsByContainer,
        'conformeCount': controls
            .where((c) => c.conformityStatus == ConformityStatus.conforme)
            .length,
        'nonConformeCount': controls
            .where((c) => c.conformityStatus == ConformityStatus.nonConforme)
            .length,
        'lastUpdated': now.toIso8601String(),
      };

      // Mettre en cache
      _collecteControlStatsCache[cacheKey] = stats;
      _cacheTimestamps[cacheKey] = now;

      if (kDebugMode) {
        print('üìä Statistiques optimis√©es pour collecte $collecteId:');
        print('   - Total contr√¥les: ${stats['totalControls']}');
        print('   - Conformes: ${stats['conformeCount']}');
        print('   - Non-conformes: ${stats['nonConformeCount']}');
        print('üíæ Mise en cache pour 5 minutes');
      }

      return stats;
    } catch (e) {
      if (kDebugMode) {
        print(
            '‚ùå Erreur lors du calcul des statistiques pour collecte $collecteId: $e');
      }
      return {};
    }
  }

  /// Invalide le cache pour une collecte sp√©cifique
  void invalidateCollecteCache(String collecteId) {
    _collecteControlStatsCache.remove(collecteId);
    _cacheTimestamps.remove(collecteId);

    if (kDebugMode) {
      print('üóëÔ∏è Cache invalid√© pour collecte $collecteId');
    }
  }

  /// Invalide tout le cache
  void invalidateAllCache() {
    _collecteControlStatsCache.clear();
    _cacheTimestamps.clear();

    if (kDebugMode) {
      print('üóëÔ∏è Tout le cache invalid√©');
    }
  }

  /// Invalide tous les caches li√©s √† un contenant
  void _invalidateAllRelatedCaches(String containerCode) {
    if (kDebugMode) {
      print(
          'üóëÔ∏è Invalidation de tous les caches pour contenant: $containerCode');
    }

    // Invalider tout le cache car on ne conna√Æt pas encore l'ID de collecte
    invalidateAllCache();

    if (kDebugMode) {
      print('üíæ Tous les caches invalid√©s pour forcer le refresh');
    }
  }

  /// Force la mise √† jour imm√©diate de l'interface
  void _forceInterfaceUpdate(String collecteId, String containerCode) {
    if (kDebugMode) {
      print('üîÑ FORCE INTERFACE UPDATE');
      print('üìã CollecteId: $collecteId');
      print('üì¶ ContainerCode: $containerCode');
    }

    // 1. Invalider le cache imm√©diatement
    invalidateCollecteCache(collecteId);

    // 2. Envoyer une notification sp√©cifique avec l'ID de collecte
    GlobalRefreshService()
        .notifyQualityControlUpdate('$collecteId:$containerCode');

    // 3. Envoyer aussi la notification g√©n√©rale
    GlobalRefreshService().notifyCollecteUpdate(collecteId);

    // 4. Notifier les listeners des changements locaux
    _notifyListeners();

    if (kDebugMode) {
      print('‚úÖ Interface forc√©e √† se mettre √† jour');
      print('üîî Notifications envoy√©es');
      print('üíæ Cache invalid√©');
    }
  }

  /// M√âTHODE DE TEST: Simule la mise √† jour en temps r√©el
  Future<void> debugTestLiveUpdate(
      String collecteId, String containerCode) async {
    if (!kDebugMode) return;

    print('üß™ TEST LIVE UPDATE');
    print('üìã CollecteId: $collecteId');
    print('üì¶ ContainerCode: $containerCode');

    // 1. V√©rifier l'√©tat du cache avant
    final statsBefore = _collecteControlStatsCache[collecteId];
    print('üíæ Cache avant: ${statsBefore != null ? 'EXISTS' : 'EMPTY'}');

    // 2. Invalider le cache
    invalidateCollecteCache(collecteId);
    print('üóëÔ∏è Cache invalid√©');

    // 3. Envoyer les notifications
    GlobalRefreshService()
        .notifyQualityControlUpdate('$collecteId:$containerCode');
    GlobalRefreshService().notifyCollecteUpdate(collecteId);
    print('üîî Notifications envoy√©es');

    // 4. Recharger les stats
    final statsAfter = await getOptimizedControlStatusForCollecte(collecteId);
    print('üìä Stats apr√®s: ${statsAfter['totalControls']} contr√¥les');

    print('‚úÖ Test termin√©');
  }

  /// Dispose les streams
  void dispose() {
    _controlsStreamController.close();
    _statsStreamController.close();
  }

  /// Recharge toutes les donn√©es depuis Firestore et met √† jour les streams
  Future<void> refreshAllData() async {
    try {
      if (kDebugMode) {
        print(
            'üßπ QUALITY: Nettoyage complet du cache (${_qualityControlsCache.length} entr√©es supprim√©es)');
      }

      // Vider compl√®tement tous les caches
      _qualityControlsCache.clear();
      _collecteControlStatsCache.clear();
      _cacheTimestamps.clear();

      if (kDebugMode) {
        print('üì° QUALITY: Rechargement depuis Firestore...');
      }

      final controls = await getAllQualityControlsFromFirestore();

      // Vider le cache et le remplir avec les nouvelles donn√©es
      _qualityControlsCache.clear();
      for (final control in controls) {
        final key =
            '${_cleanContainerCode(control.containerCode)}_${control.receptionDate.millisecondsSinceEpoch}';
        _qualityControlsCache[key] = control;
      }

      // Notifier les listeners
      _notifyListeners();

      if (kDebugMode) {
        print(
            '‚úÖ Donn√©es de contr√¥le qualit√© recharg√©es: ${controls.length} contr√¥les');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erreur lors du rechargement des donn√©es: $e');
      }
    }
  }

  /// DEBUG: V√©rifie l'√©tat des contr√¥les d'une collecte sp√©cifique
  Future<void> debugCheckCollecteControlStatus(
      String collecteId, String collectionName) async {
    if (!kDebugMode) return;

    try {
      final userSession = Get.find<UserSession>();
      final siteUtilisateur = userSession.site ?? 'SiteInconnu';

      final doc = await _firestore
          .collection(collectionName)
          .doc(siteUtilisateur)
          .collection('data')
          .doc(collecteId)
          .get();

      if (doc.exists) {
        final data = doc.data()!;
        final contenants = data['contenants'] as List<dynamic>?;

        print('üîç DEBUG - √âtat de la collecte $collecteId:');
        print('üì¶ Nombre de contenants: ${contenants?.length ?? 0}');

        if (contenants != null) {
          for (int i = 0; i < contenants.length; i++) {
            final contenant = contenants[i];
            final id =
                contenant['id'] ?? 'C${(i + 1).toString().padLeft(3, '0')}';
            final controlInfo = contenant['controlInfo'];

            if (controlInfo != null) {
              print(
                  '‚úÖ Contenant $id: CONTR√îL√â - ${controlInfo['conformityStatus']} par ${controlInfo['controllerName']}');
            } else {
              print('‚ùå Contenant $id: NON CONTR√îL√â');
            }
          }
        }
      } else {
        print(
            '‚ö†Ô∏è DEBUG: Collecte $collecteId non trouv√©e dans $collectionName');
      }
    } catch (e) {
      print('‚ùå DEBUG: Erreur lors de la v√©rification: $e');
    }
  }

  /// Nettoie et formate un composant d'ID (m√™me logique que UniversalContainerIdService)
  String _cleanComponent(String component) {
    // Nettoyer et normaliser le composant
    String cleaned = component
        .trim() // Enlever espaces d√©but/fin
        .toUpperCase() // Mettre en majuscules
        .replaceAll(
            RegExp(r'[^A-Z0-9]'), ''); // Garder seulement lettres et chiffres

    // Augmenter significativement la limite √† 20 caract√®res pour √©viter la troncature
    if (cleaned.length > 20) {
      cleaned = cleaned.substring(0, 20);
    }

    // S'assurer qu'il y a au moins un caract√®re
    if (cleaned.isEmpty) {
      cleaned = 'INCONNU';
    }

    return cleaned;
  }

  ContainerType _resolveContainerType(String rawValue) {
    final lower = rawValue.toLowerCase();
    return ContainerType.values.firstWhere(
      (type) =>
          type.name.toLowerCase() == lower || type.label.toLowerCase() == lower,
      orElse: () => ContainerType.bidon,
    );
  }

  /// Nettoie sp√©cifiquement un code de contenant
  String _cleanContainerCode(String containerCode) {
    // Pour les codes de contenants, on garde une logique similaire mais adapt√©e
    String cleaned = containerCode
        .trim() // Enlever espaces d√©but/fin
        .toUpperCase() // Mettre en majuscules
        .replaceAll(RegExp(r'[^A-Z0-9_]'),
            ''); // Garder lettres, chiffres et underscore

    // S'assurer qu'il y a au moins un caract√®re
    if (cleaned.isEmpty) {
      cleaned = 'CONTAINER_INCONNU';
    }

    return cleaned;
  }
}

/// Mod√®le pour les statistiques de qualit√©
class QualityStats {
  final int totalControls;
  final int conformeCount;
  final int nonConformeCount;
  final double conformityRate;
  final double averageWaterContent;
  final double totalHoneyWeight;

  const QualityStats({
    required this.totalControls,
    required this.conformeCount,
    required this.nonConformeCount,
    required this.conformityRate,
    required this.averageWaterContent,
    required this.totalHoneyWeight,
  });
}
