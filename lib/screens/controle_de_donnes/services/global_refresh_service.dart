// Service de notification globale pour rafra√Æchir les pages apr√®s mise √† jour
import 'dart:async';
import 'package:flutter/foundation.dart';

/// Service singleton pour g√©rer les notifications de mise √† jour globales
class GlobalRefreshService {
  static final GlobalRefreshService _instance =
      GlobalRefreshService._internal();
  factory GlobalRefreshService() => _instance;
  GlobalRefreshService._internal();

  // Stream controller pour notifier les changements de collectes
  final StreamController<String> _collecteUpdateController =
      StreamController<String>.broadcast();

  // Stream controller pour notifier les changements de contr√¥les qualit√©
  final StreamController<String> _qualityControlUpdateController =
      StreamController<String>.broadcast();

  // Stream controller pour notifier les changements de synchronisation interface
  final StreamController<Map<String, dynamic>> _interfaceSyncController =
      StreamController<Map<String, dynamic>>.broadcast();

  // Streams publics pour √©couter les changements
  Stream<String> get collecteUpdatesStream => _collecteUpdateController.stream;
  Stream<String> get qualityControlUpdatesStream =>
      _qualityControlUpdateController.stream;
  Stream<Map<String, dynamic>> get interfaceSyncStream =>
      _interfaceSyncController.stream;

  /// Notifie qu'une collecte a √©t√© mise √† jour
  void notifyCollecteUpdate(String collecteId) {
    if (kDebugMode) {
      print(
          'üì¢ GlobalRefreshService: Notification mise √† jour collecte $collecteId');
    }
    _collecteUpdateController.add(collecteId);
  }

  /// Notifie qu'un contr√¥le qualit√© a √©t√© cr√©√©/modifi√©
  void notifyQualityControlUpdate(String containerCode) {
    if (kDebugMode) {
      print(
          'üì¢ GlobalRefreshService: Notification mise √† jour contr√¥le $containerCode');
    }
    _qualityControlUpdateController.add(containerCode);
  }

  /// Notifie une mise √† jour g√©n√©rale (force le rafra√Æchissement de toutes les pages)
  void notifyGlobalUpdate() {
    if (kDebugMode) {
      print('üì¢ GlobalRefreshService: Notification mise √† jour globale');
    }
    _collecteUpdateController.add('GLOBAL_UPDATE');
    _qualityControlUpdateController.add('GLOBAL_UPDATE');
  }

  /// Notifie une synchronisation sp√©cifique entre interfaces
  void notifyInterfaceSync({
    required String action,
    required String collecteId,
    String? containerCode,
    Map<String, dynamic>? additionalData,
  }) {
    if (kDebugMode) {
      print('üîÑ GlobalRefreshService: Synchronisation interface - $action');
      print('   CollecteId: $collecteId');
      if (containerCode != null) print('   ContainerCode: $containerCode');
    }

    final syncData = {
      'action': action,
      'collecteId': collecteId,
      'containerCode': containerCode,
      'timestamp': DateTime.now().toIso8601String(),
      ...?additionalData,
    };

    _interfaceSyncController.add(syncData);
  }

  /// M√âTHODE DE DEBUG : Force une mise √† jour pour tester le syst√®me
  void debugForceRefresh() {
    if (kDebugMode) {
      print('üîß DEBUG: For√ßage d\'une mise √† jour globale');
      notifyGlobalUpdate();
    }
  }

  /// Dispose les streams
  void dispose() {
    _collecteUpdateController.close();
    _qualityControlUpdateController.close();
    _interfaceSyncController.close();
  }
}
