import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../data/models/report_models.dart';
import '../data/services/enhanced_pdf_service.dart';
import '../screens/vente/utils/apisavana_pdf_service.dart';

/// Test complet du syst√®me de logo APISAVANA dans tous les services PDF
class LogoTestService {
  /// Test principal : g√©n√®re des PDF de test avec logo APISAVANA visible
  static Future<void> runCompleteLogoTest() async {
    print('üß™ D√âBUT DU TEST COMPLET DU LOGO APISAVANA');
    print('=' * 60);

    // 1. V√©rifier l'existence du fichier logo
    await _testLogoFileExists();

    // 2. Tester le chargement du logo dans ApiSavanaPdfService
    await _testApiSavanaPdfServiceLogo();

    // 3. Tester le chargement du logo dans EnhancedPdfService
    await _testEnhancedPdfServiceLogo();

    // 4. G√©n√©rer un PDF de test avec le logo
    await _generateTestPdfWithLogo();

    print('=' * 60);
    print('üéØ TEST COMPLET TERMIN√â');
  }

  static Future<void> _testLogoFileExists() async {
    print('\nüìÅ Test 1: V√©rification du fichier logo...');

    try {
      final byteData = await rootBundle.load('assets/logo/logo.jpeg');
      final bytes = byteData.buffer.asUint8List();

      if (bytes.isNotEmpty) {
        print('‚úÖ Fichier logo.jpeg trouv√© (${bytes.length} bytes)');
        print('   üìè Taille: ${(bytes.length / 1024).toStringAsFixed(1)} KB');
      } else {
        print('‚ùå Fichier logo.jpeg est vide');
      }
    } catch (e) {
      print('‚ùå Erreur chargement logo.jpeg: $e');
      print('üìã V√©rifiez:');
      print('   - assets/logo/logo.jpeg existe');
      print('   - pubspec.yaml contient: assets: [assets/logo/]');
    }
  }

  static Future<void> _testApiSavanaPdfServiceLogo() async {
    print('\nüé® Test 2: ApiSavanaPdfService...');

    try {
      await ApiSavanaPdfService.loadLogo();
      print('‚úÖ Logo charg√© dans ApiSavanaPdfService');

      // Test de g√©n√©ration d'en-t√™te avec logo
      final headerWidget = ApiSavanaPdfService.buildHeader(
        documentTitle: 'TEST LOGO APISAVANA',
        documentNumber: 'TEST-001',
        documentDate: DateTime.now(),
        showLogo: true,
      );

      if (headerWidget != null) {
        print('‚úÖ En-t√™te avec logo g√©n√©r√© avec succ√®s');
        print('   üìê Taille du logo: 120px (optimis√©e pour visibilit√©)');
        print('   üéØ Logo APISAVANA sera bien visible dans les PDF');
      }
    } catch (e) {
      print('‚ùå Erreur ApiSavanaPdfService: $e');
    }
  }

  static Future<void> _testEnhancedPdfServiceLogo() async {
    print('\n‚ö° Test 3: EnhancedPdfService...');

    try {
      await EnhancedPdfService.loadLogo();
      print('‚úÖ Logo charg√© dans EnhancedPdfService');
      print('   üìê Taille du logo: 120px (optimis√©e pour visibilit√©)');
      print(
          '   üéØ Logo APISAVANA sera bien visible dans les rapports statistiques');
    } catch (e) {
      print('‚ùå Erreur EnhancedPdfService: $e');
    }
  }

  static Future<void> _generateTestPdfWithLogo() async {
    print('\nüìÑ Test 4: G√©n√©ration PDF de test...');

    try {
      // Cr√©er un rapport de test
      final testReport = RapportStatistiques(
        numeroRapport: 'TEST-LOGO-001',
        dateGeneration: DateTime.now(),
        siteCollecte: 'SITE DE TEST',
        typeCollecte: 'Test Logo',
        periodeDebut: DateTime.now().subtract(const Duration(days: 30)),
        periodeFin: DateTime.now(),
        collectesAnalysees: 5,
        contenantsAnalyses: 25,
        poidsTotal: 125.5,
        montantTotal: 75000.0,
        collectesDetaillees: [],
        statistiquesContenants: {},
        localisationData: {
          'latitude': 12.3456,
          'longitude': -1.6789,
          'address': 'Test Address, Burkina Faso'
        },
      );

      // G√©n√©rer le PDF avec le logo APISAVANA
      final pdfBytes =
          await EnhancedPdfService.genererRapportStatistiquesAmeliore(
              testReport);

      if (pdfBytes.isNotEmpty) {
        print('‚úÖ PDF de test g√©n√©r√© avec succ√®s (${pdfBytes.length} bytes)');
        print(
            '   üìè Taille: ${(pdfBytes.length / 1024).toStringAsFixed(1)} KB');
        print('   üéØ Le logo APISAVANA est int√©gr√© et bien visible');

        // Sauvegarder le PDF de test (optionnel)
        try {
          final file = File('test_logo_apisavana.pdf');
          await file.writeAsBytes(pdfBytes);
          print('   üíæ PDF sauvegard√©: ${file.path}');
        } catch (e) {
          print('   ‚ö†Ô∏è Impossible de sauvegarder: $e');
        }
      } else {
        print('‚ùå PDF de test vide');
      }
    } catch (e) {
      print('‚ùå Erreur g√©n√©ration PDF de test: $e');
    }
  }

  /// Test rapide pour v√©rifier uniquement la pr√©sence du logo
  static Future<bool> quickLogoCheck() async {
    try {
      final byteData = await rootBundle.load('assets/logo/logo.jpeg');
      return byteData.lengthInBytes > 0;
    } catch (e) {
      return false;
    }
  }

  /// Instructions pour l'utilisateur
  static void printLogoInstructions() {
    print('\nüìã INSTRUCTIONS LOGO APISAVANA:');
    print('-' * 40);
    print('1. Placez votre logo dans: assets/logo/logo.jpeg');
    print('2. V√©rifiez pubspec.yaml:');
    print('   flutter:');
    print('     assets:');
    print('       - assets/logo/');
    print('3. Le logo sera automatiquement:');
    print('   ‚úì Redimensionn√© √† 120px de largeur');
    print('   ‚úì Entour√© d\'une bordure noire');
    print('   ‚úì Affich√© dans tous les PDF');
    print('   ‚úì Bien visible avec le texte APISAVANA lisible');
    print('4. Fallback automatique si le logo manque');
    print('-' * 40);
  }
}
